---
alwaysApply: false
---

# Shadcn Flutter - Guidelines & Rules

## Prinsip Dasar

**Gunakan shadcn_flutter sebagai widget utama** - Selalu prioritaskan widget shadcn_flutter sebelum menggunakan widget Flutter standar
**Gunakan AllnimallButton dan AllnimallIconButton** - Untuk button dan icon button, gunakan widget custom Allnimall yang memiliki animasi hover dan bounce
**Gunakan toast** - Instead of snackbar bawaan, guanakan toast shadcn
**Konsistensi desain** - Gunakan komponen shadcn untuk memastikan konsistensi visual di seluruh aplikasi
**Bahasa Indonesia** - Semua label, button dan text di aplikasi ini harus berbahasa Indonesia

## Setup & Konfigurasi

### Import yang Benar

```dart
// ‚úÖ BENAR - Gunakan import shadcn_flutter
import 'package:shadcn_flutter/shadcn_flutter.dart';

// ‚ùå SALAH - Jangan import material.dart
import 'package:flutter/material.dart';
```

### Setup Aplikasi

```dart
// Untuk aplikasi pure shadcn tanpa Material
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ShadApp();
  }
}

// Untuk mixing dengan Material
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ShadApp.custom(
      appBuilder: (context, theme) => MaterialApp(
        theme: theme,
        home: MyHomePage(),
      ),
    );
  }
}
```

## Typography

### Penggunaan Text Styles

```dart
// Headlines
const Text('Judul Utama').h1
const Text('Judul Kedua').h2
const Text('Judul Ketiga').h3
const Text('Judul Keempat').h4

// Paragraph dan text styles
const Text('Paragraf normal').p
const Text('Blockquote').blockQuote
const Text('Lead text').lead
const Text('Large text').textLarge
const Text('Small text').textSmall
const Text('Muted text').muted

// Font weights
const Text('Bold text').bold
const Text('Semi bold').semiBold
const Text('Medium text').medium
const Text('Normal text').normal
const Text('Light text').light

// Font sizes
const Text('Extra small').xSmall
const Text('Small').small
const Text('Base').base
const Text('Large').large
const Text('Extra large').xLarge
```

## Layout & Spacing

### Padding dan Margin

```dart
// Padding
Container().withPadding(all: 16)
Container().withPadding(top: 24, bottom: 12, horizontal: 16)

// Margin
Container().withMargin(all: 16)
Container().withMargin(top: 24, bottom: 12, horizontal: 16)

// Center
Container().center()

// Gap untuk spacing
Row(
  children: [
    Text('Item 1'),
    Text('Item 2'),
    Text('Item 3'),
  ],
).gap(32)
```

### Uniform Height Guidelines

```dart
// Text Field Height (44px - standar touch target yang nyaman)
TextField(
  placeholder: Text('Username'),
).constrained(height: 44)

TextField(
  placeholder: Text('Password'),
  obscureText: !_isPasswordVisible,
  features: [
    InputFeature.trailing(
      AllnimallIconButton.ghost(
        onPressed: () {
          setState(() {
            _isPasswordVisible = !_isPasswordVisible;
          });
        },
        icon: Icon(
          _isPasswordVisible
            ? Icons.visibility_off
            : Icons.visibility,
        ),
      ),
    ),
  ],
).constrained(height: 44)

// Button Height (48px - standar untuk AllnimallButton)
AllnimallButton.primary(
  onPressed: () {},
  child: const Text('Masuk'),
)

AllnimallButton.secondary(
  onPressed: () {},
  child: const Text('Batal'),
)

// IconButton Height (40px - standar untuk AllnimallIconButton)
AllnimallIconButton.primary(
  onPressed: () {},
  icon: const Icon(Icons.add),
)

AllnimallIconButton.secondary(
  onPressed: () {},
  icon: const Icon(Icons.edit),
)
```

### Separator

```dart
// Horizontal separator
Column(
  children: [
    Text('Item 1'),
    Text('Item 2'),
    Text('Item 3'),
  ],
).separator(const Divider())

// Vertical separator
Row(
  children: [
    Text('Item 1'),
    Text('Item 2'),
    Text('Item 3'),
  ],
).separator(const VerticalDivider())
```

## Daftar Widget Shadcn yang Tersedia

### üìÅ Control

- Button (button.md)
- IconButton (button.md)

### üìÅ Form

- TextField (text-input.md)
- TextArea (text-area.md)
- AutoComplete (auto-complete.md)
- Checkbox (checkbox.md)
- ChipInput (chip-input.md)
- ColorPicker (color-picker.md)
- DatePicker (date-picker.md)
- FormattedInput (formatted-input.md)
- InputOTP (input-otp.md)
- ItemPicker (item-picker.md)
- MultiSelect (multi-select.md)
- NumberInput (number-input.md)
- PhoneInput (phone-input.md)
- RadioCard (radio-card.md)
- RadioGroup (radio-group.md)
- Select (select.md)
- Slider (slider.md)
- StarRating (star-rating.md)
- Switch (switch.md)
- TimePicker (time-picker.md)
- Toggle (toggle.md)

### üìÅ Layout

- AppBar (appbar.md)
- Card (card.md)
- CardImage (card-image.md)
- Carousel (carousel.md)
- Divider (divider.md)
- Resizable (resizable.md)
- Scaffold (scaffold.md)
- Sortable (sortable.md)
- Stepper (stepper.md)
- Steps (steps.md)
- Timeline (timeline.md)

### üìÅ Feedback

- Alert (alert.md)
- AlertDialog (alert-dialog.md)
- CircularProgress (circular-progress.md)
- LinearProgress (linear-progress.md)
- Progress (progress.md)
- Skeleton (skeleton.md)
- Toast (toast.md)

### üìÅ Overlay

- Dialog (dialog.md)
- Drawer (drawer.md)
- HoverCard (hover-card.md)
- Popover (popover.md)
- Sheet (sheet.md)
- Swiper (swiper.md)
- Tooltip (tootltip.md)
- Window (window.md)

### üìÅ Navigation

- Breadcrumb (breadcrumb.md)
- DotIndicator (dot-indicator.md)
- ExpandableSidebar (expandable-sidebar.md)
- MenuBar (menu-bar.md)
- NavigationBar (navigation-bar.md)
- NavigationMenu (navigation-menu.md)
- NavigationRail (navigation-rail.md)
- NavigationSidebar (navigation-sidebar.md)
- Pagination (pagination.md)
- TabList (tab-list.md)
- TabPane (tab-pane.md)
- Tabs (tabs.md)
- Tree (tree.md)

### üìÅ Display

- Avatar (avatar.md)
- AvatarGroup (avatar-group.md)
- CodeSnippet (code-snippet.md)
- Table (table.md)
- Tracker (tracker.md)

### üìÅ Utility

- Badge (badge.md)
- Calendar (calendar.md)
- Chip (chip.md)
- Command (command.md)
- ContextMenu (context-menu.md)
- DropdownMenu (dropdown-menu.md)
- KeyboardDisplay (keyboard-display.md)
- OverflowMarquee (overflow-marquee.md)
- RefreshTrigger (refresh-trigger.md)

### üìÅ Animation

- AnimatedValue (animated-value.md)
- NumberTicker (number-ticker.md)
- RepeatedAnimation (repeated-animation.md)
- TimelineAnimation (timeline-animation.md)

### üìÅ Disclosure

- Accordion (accordion.md)
- Collapsible (collapsible.md)

## Cara Penggunaan Widget

### üìÅ Control

````dart
// Primary button
PrimaryButton(
  onPressed: () {},
  child: const Text('Primary'),
)

// Secondary button
SecondaryButton(
  onPressed: () {},
  child: const Text('Secondary'),
)

// Outline button
OutlineButton(
  onPressed: () {},
  child: const Text('Outlined'),
)

// Ghost button
GhostButton(
  onPressed: () {},
  child: const Text('Ghost'),
)

// Destructive button
DestructiveButton(
  onPressed: () {},
  child: const Text('Destructive'),
)

// IconButton variants
IconButton(
  onPressed: () {},
  icon: const Icon(Icons.add),
)

IconButton.secondary(
  onPressed: () {},
  icon: const Icon(Icons.edit),
)

IconButton.outline(
  onPressed: () {},
  icon: const Icon(Icons.delete),
)

IconButton.ghost(
  onPressed: () {},
  icon: const Icon(Icons.more_vert),
)

IconButton.destructive(
  onPressed: () {},
  icon: const Icon(Icons.close),
)

IconButton.loading(
  onPressed: () {},
  icon: const Icon(Icons.refresh),
)

### üìÅ Form

```dart
// AutoComplete
AutoComplete(
  suggestions: _currentSuggestions,
  child: TextField(
    controller: _controller,
    onChanged: _updateSuggestions,
    trailing: const IconButton.text(
      density: ButtonDensity.compact,
      icon: Icon(Icons.clear),
      onPressed: clearActiveTextInput,
    ),
  ),
)

// Checkbox
Checkbox(
  state: _state,
  onChanged: (value) {
    setState(() {
      _state = value;
    });
  },
  trailing: const Text('Remember me'),
)

// Checkbox with tristate
Checkbox(
  state: _state,
  onChanged: (value) {
    setState(() {
      _state = value;
    });
  },
  trailing: const Text('Remember me'),
  tristate: true,
)

// ChipInput
ChipInput<String>(
  controller: _controller,
  onSubmitted: (value) {
    setState(() {
      _chips.add(value);
      _suggestions.clear();
      _controller.clear();
    });
  },
  suggestions: _suggestions,
  onSuggestionChoosen: (index) {
    setState(() {
      _chips.add(_suggestions[index]);
      _controller.clear();
    });
  },
  onChanged: (value) {
    setState(() {
      _chips = value;
    });
  },
  chips: _chips,
  chipBuilder: (context, chip) {
    return Text(chip);
  },
)

// ColorPicker
ColorInput(
  color: color,
  mode: PromptMode.popover,
  onChanged: (value) {
    setState(() {
      color = value;
    });
  },
  storage: ColorHistoryStorage.of(context),
)

// DatePicker
DatePicker(
  value: _value,
  mode: PromptMode.popover,
  stateBuilder: (date) {
    if (date.isAfter(DateTime.now())) {
      return DateState.disabled;
    }
    return DateState.enabled;
  },
  onChanged: (value) {
    setState(() {
      _value = value;
    });
  },
)

// DateRangePicker
DateRangePicker(
  value: _value,
  mode: PromptMode.popover,
  onChanged: (value) {
    setState(() {
      _value = value;
    });
  },
)

// FormattedInput
FormattedInput(
  formatter: MaskTextInputFormatter(mask: '##-##-##'),
  onChanged: (value) {},
)

// InputOTP
InputOTP(
  onChanged: (value) {
    setState(() {
      this.value = value.otpToString();
    });
  },
  onSubmitted: (value) {
    setState(() {
      submittedValue = value.otpToString();
    });
  },
  children: [
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.separator,
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
  ],
)

// ItemPicker
ItemPicker(
  items: items,
  onChanged: (item) {},
)

// MultiSelect
MultiSelect(
  options: options,
  selectedValues: selectedValues,
  onChanged: (values) {},
)

// NumberInput
NumberInput(
  initialValue: 0,
  onChanged: (value) {},
)

// PhoneInput
PhoneInput(
  onChanged: (value) {},
)

// RadioCard
RadioCard(
  value: 'option1',
  groupValue: selectedValue,
  onChanged: (value) {},
  child: Text('Option 1'),
)

// RadioGroup
RadioGroup(
  value: selectedValue,
  onChanged: (value) {},
  children: [
    Radio(value: 'option1', child: Text('Option 1')),
    Radio(value: 'option2', child: Text('Option 2')),
  ],
)

// Select
Select<String>(
  itemBuilder: (context, item) {
    return Text(item);
  },
  popupConstraints: const BoxConstraints(
    maxHeight: 300,
    maxWidth: 200,
  ),
  onChanged: (value) {
    setState(() {
      selectedValue = value;
    });
  },
  value: selectedValue,
  placeholder: const Text('Select a fruit'),
  popup: const SelectPopup(
    items: SelectItemList(
      children: [
        SelectItemButton(
          value: 'Apple',
          child: Text('Apple'),
        ),
        SelectItemButton(
          value: 'Banana',
          child: Text('Banana'),
        ),
        SelectItemButton(
          value: 'Cherry',
          child: Text('Cherry'),
        ),
      ],
    ),
  ),
)

// Slider
Slider(
  initialValue: 50,
  min: 0,
  max: 100,
  onChanged: (value) {},
)

// StarRating
StarRating(
  rating: 3.5,
  onChanged: (rating) {},
)

// Switch
Switch(
  value: isEnabled,
  onChanged: (value) {},
)

// TextArea
const TextArea(
  initialValue: 'Hello, World!',
  expandableHeight: true,
  initialHeight: 300,
)

// TextField
const TextField(
  placeholder: Text('Enter your name'),
)

// TimePicker
TimePicker(
  selected: selectedTime,
  onChanged: (time) {},
)

// Toggle
Toggle(
  value: isToggled,
  onChanged: (value) {},
)
````

### üìÅ Layout

```dart
// AppBar (appbar.md)
OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: AppBar(
    header: const Text('This is Header'),
    title: const Text('This is Title'),
    subtitle: const Text('This is Subtitle'),
    leading: [
      OutlineButton(
        density: ButtonDensity.icon,
        onPressed: () {},
        child: const Icon(Icons.arrow_back),
      ),
    ],
    trailing: [
      OutlineButton(
        density: ButtonDensity.icon,
        onPressed: () {},
        child: const Icon(Icons.search),
      ),
      OutlineButton(
        density: ButtonDensity.icon,
        onPressed: () {},
        child: const Icon(Icons.more_vert),
      ),
    ],
  ),
)

// Card (card.md)
Card(
  padding: const EdgeInsets.all(24),
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      const Text('Create project').semiBold(),
      const SizedBox(height: 4),
      const Text('Deploy your new project in one-click').muted().small(),
      const SizedBox(height: 24),
      const Text('Name').semiBold().small(),
      const SizedBox(height: 4),
      const TextField(placeholder: Text('Name of your project')),
      const SizedBox(height: 16),
      const Text('Description').semiBold().small(),
      const SizedBox(height: 4),
      const TextField(placeholder: Text('Description of your project')),
      const SizedBox(height: 24),
      Row(
        children: [
          OutlineButton(
            child: const Text('Cancel'),
            onPressed: () {},
          ),
          const Spacer(),
          PrimaryButton(
            child: const Text('Deploy'),
            onPressed: () {},
          ),
        ],
      ),
    ],
  ),
).intrinsic()

// CardImage (card-image.md)
ScrollConfiguration(
  behavior: ScrollConfiguration.of(context).copyWith(
    dragDevices: {
      PointerDeviceKind.touch,
      PointerDeviceKind.mouse,
    },
  ),
  child: SingleChildScrollView(
    scrollDirection: Axis.horizontal,
    child: IntrinsicHeight(
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        mainAxisSize: MainAxisSize.min,
        children: [
          for (int i = 0; i < 10; i++)
            CardImage(
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (context) {
                    return AlertDialog(
                      title: const Text('Card Image'),
                      content: const Text('You clicked on a card image.'),
                      actions: [
                        PrimaryButton(
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                          child: const Text('Close'),
                        ),
                      ],
                    );
                  },
                );
              },
              image: Image.network('https://picsum.photos/200/300'),
              title: Text('Card Number ${i + 1}'),
              subtitle: const Text('Lorem ipsum dolor sit amet'),
            ),
        ],
      ).gap(8),
    ),
  ),
)

// Carousel (carousel.md) - Horizontal
final CarouselController controller = CarouselController();
SizedBox(
  width: 800,
  child: Row(
    children: [
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animatePrevious(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_back),
      ),
      const Gap(24),
      Expanded(
        child: SizedBox(
          height: 200,
          child: Carousel(
            transition: const CarouselTransition.sliding(gap: 24),
            controller: controller,
            sizeConstraint: const CarouselFixedConstraint(200),
            autoplaySpeed: const Duration(seconds: 2),
            itemCount: 5,
            itemBuilder: (context, index) {
              return NumberedContainer(index: index);
            },
            duration: const Duration(seconds: 1),
          ),
        ),
      ),
      const Gap(24),
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animateNext(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_forward),
      ),
    ],
  ),
)

// Carousel (carousel.md) - Vertical
final CarouselController controller = CarouselController();
SizedBox(
  height: 500,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animatePrevious(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_upward),
      ),
      const Gap(24),
      Expanded(
        child: SizedBox(
          width: 200,
          child: Carousel(
            transition: const CarouselTransition.sliding(gap: 24),
            alignment: CarouselAlignment.center,
            controller: controller,
            direction: Axis.vertical,
            sizeConstraint: const CarouselFixedConstraint(200),
            itemBuilder: (context, index) {
              return NumberedContainer(index: index);
            },
          ),
        ),
      ),
      const Gap(24),
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animateNext(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_downward),
      ),
    ],
  ),
)

// Carousel (carousel.md) - Fading
final CarouselController controller = CarouselController();
SizedBox(
  width: 800,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      SizedBox(
        height: 200,
        child: Carousel(
          transition: const CarouselTransition.fading(),
          controller: controller,
          draggable: false,
          autoplaySpeed: const Duration(seconds: 1),
          itemCount: 5,
          itemBuilder: (context, index) {
            return NumberedContainer(index: index);
          },
          duration: const Duration(seconds: 1),
        ),
      ),
      const Gap(8),
      Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          CarouselDotIndicator(itemCount: 5, controller: controller),
          const Spacer(),
          OutlineButton(
            shape: ButtonShape.circle,
            onPressed: () {
              controller.animatePrevious(const Duration(milliseconds: 500));
            },
            child: const Icon(Icons.arrow_back),
          ),
          const Gap(8),
          OutlineButton(
            shape: ButtonShape.circle,
            onPressed: () {
              controller.animateNext(const Duration(milliseconds: 500));
            },
            child: const Icon(Icons.arrow_forward),
          ),
        ],
      ),
    ],
  ),
)

// Carousel (carousel.md) - Continuous Sliding
final CarouselController controller = CarouselController();
SizedBox(
  width: 800,
  height: 200,
  child: Carousel(
    transition: const CarouselTransition.sliding(gap: 24),
    controller: controller,
    draggable: false,
    autoplaySpeed: const Duration(seconds: 2),
    curve: Curves.linear,
    itemCount: 5,
    sizeConstraint: const CarouselSizeConstraint.fixed(200),
    itemBuilder: (context, index) {
      return NumberedContainer(index: index);
    },
    duration: Duration.zero,
  ),
)

// Divider (divider.md) - Horizontal
const SizedBox(
  width: 300,
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      Text('Item 1'),
      Divider(),
      Text('Item 2'),
      Divider(),
      Text('Item 3'),
    ],
  ),
)
// Divider (divider.md) - Vertical
const SizedBox(
  width: 300,
  height: 100,
  child: Row(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      Expanded(child: Text('Item 1')),
      VerticalDivider(),
      Expanded(child: Text('Item 2')),
      VerticalDivider(),
      Expanded(child: Text('Item 3')),
    ],
  ),
)
// Divider with Text
const SizedBox(
  width: 300,
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      Text('Item 1'),
      Divider(child: Text('Divider')),
      Text('Item 2'),
      Divider(child: Text('Divider')),
      Text('Item 3'),
    ],
  ),
)

// Resizable (resizable.md) - Horizontal
const OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 1,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 120,
        child: NumberedContainer(
          index: 2,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 3,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 4,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Vertical
const OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.vertical(
    children: [
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 0,
          width: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 120,
        child: NumberedContainer(
          index: 1,
          width: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 2,
          width: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Horizontal with Dragger
OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    draggerBuilder: (context) {
      return const HorizontalResizableDragger();
    },
    children: const [
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 1,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 120,
        child: NumberedContainer(
          index: 2,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 3,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 4,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Controller
final AbsoluteResizablePaneController controller1 = AbsoluteResizablePaneController(80);
final AbsoluteResizablePaneController controller2 = AbsoluteResizablePaneController(80);
final AbsoluteResizablePaneController controller3 = AbsoluteResizablePaneController(120);
final AbsoluteResizablePaneController controller4 = AbsoluteResizablePaneController(80);
final AbsoluteResizablePaneController controller5 = AbsoluteResizablePaneController(80);

OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane.controlled(
        controller: controller1,
        child: const NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller2,
        child: const NumberedContainer(
          index: 1,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller3,
        maxSize: 200,
        child: const NumberedContainer(
          index: 2,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller4,
        child: const NumberedContainer(
          index: 3,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller5,
        minSize: 80,
        collapsedSize: 20,
        child: const NumberedContainer(
          index: 4,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Collapsible
final ResizablePaneController controller = AbsoluteResizablePaneController(120);
final ResizablePaneController controller2 = AbsoluteResizablePaneController(120);

OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane.controlled(
        minSize: 100,
        collapsedSize: 40,
        controller: controller,
        child: AnimatedBuilder(
          animation: controller,
          builder: (context, child) {
            if (controller.collapsed) {
              return Container(
                alignment: Alignment.center,
                height: 200,
                child: const RotatedBox(
                  quarterTurns: -1,
                  child: Text('Collapsed'),
                ),
              );
            }
            return Container(
              alignment: Alignment.center,
              height: 200,
              child: const Text('Expanded'),
            );
          },
        ),
      ),
      ResizablePane(
        initialSize: 300,
        child: Container(
          alignment: Alignment.center,
          height: 200,
          child: const Text('Resizable'),
        ),
      ),
      ResizablePane.controlled(
        minSize: 100,
        collapsedSize: 40,
        controller: controller2,
        child: AnimatedBuilder(
          animation: controller2,
          builder: (context, child) {
            if (controller2.collapsed) {
              return Container(
                alignment: Alignment.center,
                height: 200,
                child: const RotatedBox(
                  quarterTurns: -1,
                  child: Text('Collapsed'),
                ),
              );
            }
            return Container(
              alignment: Alignment.center,
              height: 200,
              child: const Text('Expanded'),
            );
          },
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Nested
const OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane(
        initialSize: 100,
        minSize: 40,
        child: NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        minSize: 100,
        initialSize: 300,
        child: ResizablePanel.vertical(
          children: [
            ResizablePane(
              initialSize: 80,
              minSize: 40,
              child: NumberedContainer(
                index: 1,
                fill: false,
              ),
            ),
            ResizablePane(
              minSize: 40,
              initialSize: 120,
              child: ResizablePanel.horizontal(
                children: [
                  ResizablePane.flex(
                    child: NumberedContainer(
                      index: 2,
                      fill: false,
                    ),
                  ),
                  ResizablePane.flex(
                    child: NumberedContainer(
                      index: 3,
                      fill: false,
                    ),
                  ),
                  ResizablePane.flex(
                    child: NumberedContainer(
                      index: 4,
                      fill: false,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      ResizablePane(
        initialSize: 100,
        minSize: 40,
        child: NumberedContainer(
          index: 5,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Dynamic Children
final List<Color> _items = List.generate(2, (index) => _generateColor());

static Color _generateColor() {
  Random random = Random();
  return HSVColor.fromAHSV(
    1.0,
    random.nextInt(360).toDouble(),
    0.8,
    0.8,
  ).toColor();
}

OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    spacing: 12,
    children: [
      ResizablePanel.vertical(
        children: [
          for (int i = 0; i < _items.length; i++)
            ResizablePane(
              key: ValueKey(_items[i].toARGB32()),
              initialSize: 200,
              minSize: 100,
              child: Container(
                color: _items[i],
                child: Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextButton(
                        child: Text('Insert Before'),
                        onPressed: () {
                          setState(() {
                            _items.insert(i, _generateColor());
                          });
                        },
                      ),
                      TextButton(
                        child: Text('Remove'),
                        onPressed: () {
                          setState(() {
                            _items.removeAt(i);
                          });
                        },
                      ),
                      TextButton(
                        child: Text('Insert After'),
                        onPressed: () {
                          setState(() {
                            _items.insert(i + 1, _generateColor());
                          });
                        },
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
      PrimaryButton(
        child: Text('Add'),
        onPressed: () {
          setState(() {
            _items.add(_generateColor());
          });
        },
      ),
    ],
  ),
)

// Scaffold (scaffold.md)
Scaffold(
  loadingProgressIndeterminate: true,
  headers: [
    AppBar(
      title: const Text('Counter App'),
      subtitle: const Text('A simple counter app'),
      leading: [
        OutlineButton(
          onPressed: () {},
          density: ButtonDensity.icon,
          child: const Icon(Icons.menu),
        ),
      ],
      trailing: [
        OutlineButton(
          onPressed: () {},
          density: ButtonDensity.icon,
          child: const Icon(Icons.search),
        ),
        OutlineButton(
          onPressed: () {},
          density: ButtonDensity.icon,
          child: const Icon(Icons.add),
        ),
      ],
    ),
    const Divider(),
  ],
  child: Center(
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        const Text('You have pushed the button this many times:').p(),
        Text('$_counter').h1(),
        PrimaryButton(
          onPressed: _incrementCounter,
          density: ButtonDensity.icon,
          child: const Icon(Icons.add),
        ).p(),
      ],
    ),
  ),
)

// Sortable (sortable.md)
// Sortable (sortable.md) - Basic
List<SortableData<String>> invited = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];
List<SortableData<String>> reserved = [
  const SortableData('David'),
  const SortableData('Richard'),
  const SortableData('Joseph'),
  const SortableData('Thomas'),
  const SortableData('Charles'),
];

SizedBox(
  height: 500,
  child: SortableLayer(
    child: Row(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Expanded(
          child: Card(
            child: SortableDropFallback<String>(
              onAccept: (value) {
                setState(() {
                  swapItemInLists([invited, reserved], value, invited, invited.length);
                });
              },
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  for (int i = 0; i < invited.length; i++)
                    Sortable<String>(
                      data: invited[i],
                      onAcceptTop: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, invited, i);
                        });
                      },
                      onAcceptBottom: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, invited, i + 1);
                        });
                      },
                      child: OutlinedContainer(
                        padding: const EdgeInsets.all(12),
                        child: Center(child: Text(invited[i].data)),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
        gap(12),
        Expanded(
          child: Card(
            child: SortableDropFallback<String>(
              onAccept: (value) {
                setState(() {
                  swapItemInLists([invited, reserved], value, reserved, reserved.length);
                });
              },
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  for (int i = 0; i < reserved.length; i++)
                    Sortable<String>(
                      data: reserved[i],
                      onAcceptTop: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, reserved, i);
                        });
                      },
                      onAcceptBottom: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, reserved, i + 1);
                        });
                      },
                      child: OutlinedContainer(
                        padding: const EdgeInsets.all(12),
                        child: Center(child: Text(reserved[i].data)),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ],
    ),
  ),
)

// Sortable (sortable.md) - Locked Axis
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];

SortableLayer(
  lock: true,
  child: SortableDropFallback<int>(
    onAccept: (value) {
      setState(() {
        names.add(names.removeAt(value.data));
      });
    },
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        for (int i = 0; i < names.length; i++)
          Sortable<String>(
            key: ValueKey(i),
            data: names[i],
            onAcceptTop: (value) {
              setState(() {
                names.swapItem(value, i);
              });
            },
            onAcceptBottom: (value) {
              setState(() {
                names.swapItem(value, i + 1);
              });
            },
            child: OutlinedContainer(
              padding: const EdgeInsets.all(12),
              child: Center(child: Text(names[i].data)),
            ),
          ),
      ],
    ),
  ),
)

// Sortable (sortable.md) - Horizontal
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];

SortableLayer(
  lock: true,
  child: SortableDropFallback<int>(
    onAccept: (value) {
      setState(() {
        names.add(names.removeAt(value.data));
      });
    },
    child: SizedBox(
      height: 50,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        mainAxisSize: MainAxisSize.min,
        children: [
          for (int i = 0; i < names.length; i++)
            Sortable<String>(
              key: ValueKey(i),
              data: names[i],
              onAcceptLeft: (value) {
                setState(() {
                  names.swapItem(value, i);
                });
              },
              onAcceptRight: (value) {
                setState(() {
                  names.swapItem(value, i + 1);
                });
              },
              child: OutlinedContainer(
                width: 100,
                padding: const EdgeInsets.all(12),
                child: Center(child: Text(names[i].data)),
              ),
            ),
        ],
      ),
    ),
  ),
)

// Sortable (sortable.md) - ListView
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
  const SortableData('David'),
  const SortableData('Richard'),
  const SortableData('Joseph'),
  const SortableData('Thomas'),
  const SortableData('Charles'),
  const SortableData('Daniel'),
  const SortableData('Matthew'),
  const SortableData('Anthony'),
  const SortableData('Donald'),
  const SortableData('Mark'),
  const SortableData('Paul'),
  const SortableData('Steven'),
  const SortableData('Andrew'),
  const SortableData('Kenneth'),
];

final ScrollController controller = ScrollController();

SizedBox(
  height: 400,
  child: SortableLayer(
    lock: true,
    child: SortableDropFallback<int>(
      onAccept: (value) {
        setState(() {
          names.add(names.removeAt(value.data));
        });
      },
      child: ScrollableSortableLayer(
        controller: controller,
        child: ListView.builder(
          controller: controller,
          itemBuilder: (context, i) {
            return Sortable<String>(
              key: ValueKey(i),
              data: names[i],
              onAcceptTop: (value) {
                setState(() {
                  names.swapItem(value, i);
                });
              },
              onAcceptBottom: (value) {
                setState(() {
                  names.swapItem(value, i + 1);
                });
              },
              child: OutlinedContainer(
                padding: const EdgeInsets.all(12),
                child: Center(child: Text(names[i].data)),
              ),
            );
          },
          itemCount: names.length,
        ),
      ),
    ),
  ),
)

// Sortable (sortable.md) - Drag Handle
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];

SortableLayer(
  lock: true,
  child: SortableDropFallback<int>(
    onAccept: (value) {
      setState(() {
        names.add(names.removeAt(value.data));
      });
    },
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        for (int i = 0; i < names.length; i++)
          Sortable<String>(
            key: ValueKey(i),
            data: names[i],
            // we only want user to drag the item from the handle,
            // so we disable the drag on the item itself
            enabled: false,
            onAcceptTop: (value) {
              setState(() {
                names.swapItem(value, i);
              });
            },
            onAcceptBottom: (value) {
              setState(() {
                names.swapItem(value, i + 1);
              });
            },
            child: OutlinedContainer(
              padding: const EdgeInsets.all(12),
              child: Row(
                children: [
                  const SortableDragHandle(child: Icon(Icons.drag_handle)),
                  const SizedBox(width: 8),
                  Expanded(child: Text(names[i].data)),
                ],
              ),
            ),
          ),
      ],
    ),
  ),
)

// Sortable (sortable.md) - Remove Item
late List<SortableData<String>> names;

void _reset() {
  names = [
    const SortableData('James'),
    const SortableData('John'),
    const SortableData('Robert'),
    const SortableData('Michael'),
    const SortableData('William'),
  ];
}

SortableLayer(
  child: Builder(
    // this builder is needed to access the context of the SortableLayer
    builder: (context) {
      return SortableDropFallback<int>(
        onAccept: (value) {
          setState(() {
            names.add(names.removeAt(value.data));
          });
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            PrimaryButton(
              onPressed: () {
                setState(() {
                  _reset();
                });
              },
              child: const Text('Reset'),
            ),
            for (int i = 0; i < names.length; i++)
              Sortable<String>(
                key: ValueKey(i),
                data: names[i],
                // we only want user to drag the item from the handle,
                // so we disable the drag on the item itself
                enabled: false,
                onAcceptTop: (value) {
                  setState(() {
                    names.swapItem(value, i);
                  });
                },
                onAcceptBottom: (value) {
                  setState(() {
                    names.swapItem(value, i + 1);
                  });
                },
                onDropFailed: () {
                  // Remove the item from the list if the drop failed
                  setState(() {
                    var removed = names.removeAt(i);
                    SortableLayer.ensureAndDismissDrop(context, removed);
                    // Dismissing drop will prevent the SortableLayer from
                    // animating the item back to its original position
                  });
                },
                child: OutlinedContainer(
                  padding: const EdgeInsets.all(12),
                  child: Row(
                    children: [
                      const SortableDragHandle(child: Icon(Icons.drag_handle)),
                      const SizedBox(width: 8),
                      Expanded(child: Text(names[i].data)),
                    ],
                  ),
                ),
              ),
          ],
        ),
      );
    },
  ),
)

// Stepper (stepper.md) - Vertical
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.vertical,
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Horizontal
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.horizontal,
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Failed Step
final StepperController controller = StepperController(
  stepStates: {
    1: StepState.failed,
  },
  currentStep: 1,
);

Stepper(
  controller: controller,
  direction: Axis.horizontal,
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return const StepContainer(
          actions: [
            SecondaryButton(child: Text('Prev')),
            PrimaryButton(child: Text('Next')),
          ],
          child: NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      contentBuilder: (context) {
        return const StepContainer(
          actions: [
            SecondaryButton(child: Text('Prev')),
            PrimaryButton(child: Text('Next')),
          ],
          child: NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return const StepContainer(
          actions: [
            SecondaryButton(child: Text('Prev')),
            PrimaryButton(child: Text('Finish')),
          ],
          child: NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Clickable Step
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.vertical,
  steps: [
    Step(
      title: const Text('Step 1'),
      icon: StepNumber(
        onPressed: () {
          controller.jumpToStep(0);
        },
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      icon: StepNumber(
        onPressed: () {
          controller.jumpToStep(1);
        },
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      icon: StepNumber(
        onPressed: () {
          controller.jumpToStep(2);
        },
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Custom Icon
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.horizontal,
  steps: [
    Step(
      title: const Text('Step 1'),
      icon: const StepNumber(
        icon: Icon(Icons.person),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      icon: const StepNumber(
        icon: Icon(Icons.house_outlined),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      icon: const StepNumber(
        icon: Icon(Icons.work_outline),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Variants
static const List<StepVariant> _variants = [
  StepVariant.circle,
  StepVariant.circleAlt,
  StepVariant.line,
];
static const List<String> _variantNames = [
  'Circle',
  'Circle Alt',
  'Line',
];
static const List<StepSize> _stepSize = StepSize.values;
static const List<String> _stepSizeNames = [
  'Small',
  'Medium',
  'Large',
];
final StepperController controller = StepperController();
int _currentVariant = 0;
int _currentStepSize = 0;
Axis direction = Axis.horizontal;

Stepper(
  controller: controller,
  direction: direction,
  size: _stepSize[_currentStepSize],
  variant: _variants[_currentVariant],
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const StepTitle(
        title: Text('Step 2'),
        subtitle: Text('Optional Step'),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Steps (steps.md)
const Steps(
  children: [
    StepItem(
      title: Text('Create a project'),
      content: [
        Text('Create a new project in the project manager.'),
        Text('Add the required files to the project.'),
      ],
    ),
    StepItem(
      title: Text('Add dependencies'),
      content: [
        Text('Add the required dependencies to the project.'),
      ],
    ),
    StepItem(
      title: Text('Run the project'),
      content: [
        Text('Run the project in the project manager.'),
      ],
    ),
  ],
)

// Timeline
Timeline(
  data: [
    TimelineData(
      time: const Text('2022-01-01'),
      title: const Text('First event'),
      content: const Text(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Odio euismod lacinia at quis risus sed vulputate odio ut. Quam viverra orci sagittis eu volutpat odio facilisis mauris.',
      ),
    ),
    TimelineData(
      time: const Text('2022-01-02'),
      title: const Text('Second event'),
      content: const Text(
        'Aut eius excepturi ex recusandae eius est minima molestiae. Nam dolores iusto ad fugit reprehenderit hic dolorem quisquam et quia omnis non suscipit nihil sit libero distinctio. Ad dolorem tempora sit nostrum voluptatem qui tempora unde? Sit rerum magnam nam ipsam nesciunt aut rerum necessitatibus est quia esse non magni quae.',
      ),
    ),
    TimelineData(
      time: const Text('2022-01-03'),
      title: const Text('Third event'),
      content: const Text(
        'Sit culpa quas ex nulla animi qui deleniti minus rem placeat mollitia. Et enim doloremque et quia sequi ea dolores voluptatem ea rerum vitae. Aut itaque incidunt est aperiam vero sit explicabo fuga id optio quis et molestiae nulla ex quae quam. Ab eius dolores ab tempora dolorum eos beatae soluta At ullam placeat est incidunt cumque.',
      ),
    ),
  ],
)
```

### üìÅ Feedback

```dart
// Alert
const Alert(
  title: Text('Alert title'),
  content: Text('This is alert content.'),
  leading: Icon(Icons.info_outline),
)

// AlertDialog
PrimaryButton(
  child: const Text('Click Here'),
  onPressed: () {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Alert title'),
          content: const Text('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
          actions: [
            OutlineButton(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            PrimaryButton(
              child: const Text('OK'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  },
)

// CircularProgressIndicator (circular-progress.md) - Example
const CircularProgressIndicator()

// CircularProgressIndicator (circular-progress.md) - With Value Example
double _progress = 0;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      CircularProgressIndicator(
        value: _progress.clamp(0, 100) / 100,
        size: 48,
      ),
      const Gap(48),
      Row(
        children: [
          DestructiveButton(
            onPressed: () {
              setState(() {
                _progress = 0;
              });
            },
            child: const Text('Reset'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              setState(() {
                _progress -= 10;
              });
            },
            child: const Text('Decrease by 10'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              setState(() {
                _progress += 10;
              });
            },
            child: const Text('Increase by 10'),
          ),
        ],
      )
    ],
  );
}

// LinearProgressIndicator (linear-progress.md) - Indeterminate
const SizedBox(
  width: 200,
  child: LinearProgressIndicator(),
)

// LinearProgressIndicator (linear-progress.md) - Determinate
double value = 0;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      SizedBox(
        width: 200,
        child: LinearProgressIndicator(
          value: value,
        ),
      ),
      const Gap(24),
      Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          PrimaryButton(
            onPressed: () {
              setState(() {
                value = 0;
              });
            },
            child: const Text('Reset'),
          ),
          const Gap(24),
          PrimaryButton(
            onPressed: () {
              if (value + 0.1 >= 1) {
                return;
              }
              setState(() {
                value += 0.1;
              });
            },
            child: const Text('Increase'),
          ),
          const Gap(24),
          PrimaryButton(
            onPressed: () {
              if (value - 0.1 <= 0) {
                return;
              }
              setState(() {
                value -= 0.1;
              });
            },
            child: const Text('Decrease'),
          ),
        ],
      )
    ],
  );
}

// Progress (progress.md)
double _progress = 0.0;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      SizedBox(
        width: 400,
        child: Progress(
          progress: _progress.clamp(0, 100),
          min: 0,
          max: 100,
        ),
      ),
      const Gap(16),
      Row(
        children: [
          DestructiveButton(
            onPressed: () {
              setState(() {
                _progress = 0;
              });
            },
            child: const Text('Reset'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              if (_progress > 0) {
                setState(() {
                  _progress -= 10;
                });
              }
            },
            child: const Text('Decrease by 10'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              if (_progress < 100) {
                setState(() {
                  _progress += 10;
                });
              }
            },
            child: const Text('Increase by 10'),
          ),
        ],
      )
    ],
  );
}

// Skeleton (skeleton.md)
Column(
  children: [
    const Basic(
      title: Text('Skeleton Example 1'),
      content: Text('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      leading: Avatar(
        initials: '',
      ),
      trailing: Icon(Icons.arrow_forward),
    ),
    const Gap(24),
    Basic(
      title: const Text('Skeleton Example 1'),
      content: const Text('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      leading: const Avatar(
        initials: '',
      ).asSkeleton(),
      // Note: Avatar and other Image related widget needs its own skeleton
      trailing: const Icon(Icons.arrow_forward),
    ).asSkeleton(),
  ],
)

// Toast (toast.md)
Widget buildToast(BuildContext context, ToastOverlay overlay) {
  return SurfaceCard(
    child: Basic(
      title: const Text('Event has been created'),
      subtitle: const Text('Sunday, July 07, 2024 at 12:00 PM'),
      trailing: PrimaryButton(
        size: ButtonSize.small,
        onPressed: () {
          overlay.close();
        },
        child: const Text('Undo'),
      ),
      trailingAlignment: Alignment.center,
    ),
  );
}

@override
Widget build(BuildContext context) {
  return Wrap(
    spacing: 8,
    runSpacing: 8,
    children: [
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.bottomLeft,
          );
        },
        child: const Text('Show Bottom Left Toast'),
      ),
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.bottomRight,
          );
        },
        child: const Text('Show Bottom Right Toast'),
      ),
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.topLeft,
          );
        },
        child: const Text('Show Top Left Toast'),
      ),
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.topRight,
          );
        },
        child: const Text('Show Top Right Toast'),
      ),
      // bottom center
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.bottomCenter,
          );
        },
        child: const Text('Show Bottom Center Toast'),
      ),
      // top center
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.topCenter,
          );
        },
        child: const Text('Show Top Center Toast'),
      ),
    ],
  );
}
```

### üìÅ Overlay

```dart
// Dialog
PrimaryButton(
  onPressed: () {
    showDialog(
      context: context,
      builder: (context) {
        final FormController controller = FormController();
        return AlertDialog(
          title: const Text('Edit profile'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text('Make changes to your profile here. Click save when you\'re done'),
              const Gap(16),
              ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 400),
                child: Form(
                  controller: controller,
                  child: const FormTableLayout(rows: [
                    FormField<String>(
                      key: FormKey(#name),
                      label: Text('Name'),
                      child: TextField(
                        initialValue: 'Thito Yalasatria Sunarya',
                      ),
                    ),
                  ]),
                ).withPadding(vertical: 16),
              ),
            ],
          ),
          actions: [
            PrimaryButton(
              child: const Text('Save changes'),
              onPressed: () {
                Navigator.of(context).pop(controller.values);
              },
            ),
          ],
        );
      },
    );
  },
  child: const Text('Edit Profile'),
)

// Drawer
openDrawer(
  context: context,
  expands: true,
  builder: (context) {
    return Container(
      padding: const EdgeInsets.all(48),
      child: IntrinsicWidth(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text('Drawer content'),
            const Gap(16),
            PrimaryButton(
              onPressed: () {},
              child: const Text('Action'),
            ),
          ],
        ),
      ),
    );
  },
  position: OverlayPosition.left,
)

// HoverCard (hover-card.md)
HoverCard(
  hoverBuilder: (context) {
    return const SurfaceCard(
      child: Basic(
        leading: FlutterLogo(),
        title: Text('@flutter'),
        content: Text(
          'The Flutter SDK provides the tools to build beautiful apps for mobile, web, and desktop from a single codebase.',
        ),
      ),
    ).sized(width: 300);
  },
  child: LinkButton(
    onPressed: () {},
    child: const Text('@flutter'),
  ),
)

// Popover (popover.md)
PrimaryButton(
  onPressed: () {
    showPopover(
      context: context,
      alignment: Alignment.topCenter,
      offset: const Offset(0, 8),
      // Unless you have full opacity surface,
      // you should explicitly set the overlay barrier.
      overlayBarrier: OverlayBarrier(
        borderRadius: theme.borderRadiusLg,
      ),
      builder: (context) {
        return ModalContainer(
          child: SizedBox(
            width: 300,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const Text('Dimensions').large().medium(),
                const Text('Set the dimensions for the layer.').muted(),
                Form(
                  controller: FormController(),
                  child: const FormTableLayout(
                    rows: [
                      FormField<double>(
                        key: FormKey(#width),
                        label: Text('Width'),
                        child: TextField(
                          initialValue: '100%',
                        ),
                      ),
                      FormField<double>(
                        key: FormKey(#maxWidth),
                        label: Text('Max. Width'),
                        child: TextField(
                          initialValue: '300px',
                        ),
                      ),
                      FormField<double>(
                        key: FormKey(#height),
                        label: Text('Height'),
                        child: TextField(
                          initialValue: '25px',
                        ),
                      ),
                      FormField<double>(
                        key: FormKey(#maxHeight),
                        label: Text('Max. Height'),
                        child: TextField(
                          initialValue: 'none',
                        ),
                      ),
                    ],
                    spacing: 8,
                  ),
                ).withPadding(vertical: 16),
                PrimaryButton(
                  onPressed: () {
                    closeOverlay(context);
                  },
                  child: const Text('Submit'),
                ),
              ],
            ),
          ),
        );
      },
    ).future.then((_) {
      print('Popover closed');
    });
  },
  child: const Text('Open popover'),
)

// Sheet (sheet.md)
final FormController controller = FormController();

void saveProfile() {
  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: const Text('Profile updated'),
        content: Text('Content: ${controller.values}'),
        actions: [
          PrimaryButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: const Text('Close'),
          ),
        ],
      );
    },
  );
}

Widget buildSheet(BuildContext context) {
  return Container(
    padding: const EdgeInsets.all(24),
    constraints: const BoxConstraints(maxWidth: 400),
    child: Form(
      controller: controller,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Expanded(
                child: const Text('Edit profile').large().medium(),
              ),
              TextButton(
                density: ButtonDensity.icon,
                child: const Icon(Icons.close),
                onPressed: () {
                  closeSheet(context);
                },
              ),
            ],
          ),
          const Gap(8),
          const Text(
            'Make changes to your profile here. Click save when you\'re done.',
          ).muted(),
          const Gap(16),
          FormTableLayout(
            rows: [
              FormField<String>(
                key: const FormKey(#name),
                label: const Text('Name'),
                validator: const NotEmptyValidator() & const LengthValidator(min: 4),
                child: const TextField(
                  initialValue: 'Thito Yalasatria Sunarya',
                  placeholder: Text('Your fullname'),
                ),
              ),
              FormField<String>(
                key: const FormKey(#username),
                label: const Text('Username'),
                validator: const NotEmptyValidator() & const LengthValidator(min: 4),
                child: const TextField(
                  initialValue: '@sunarya-thito',
                  placeholder: Text('Your username'),
                ),
              ),
            ],
          ),
          const Gap(16),
          Align(
            alignment: AlignmentDirectional.centerEnd,
            child: FormErrorBuilder(
              builder: (context, errors, child) {
                return PrimaryButton(
                  onPressed: errors.isNotEmpty
                      ? null
                      : () {
                          context.submitForm().then(
                            (value) {
                              if (value.errors.isEmpty) {
                                closeSheet(context).then(
                                  (value) {
                                    saveProfile();
                                  },
                                );
                              }
                            },
                          );
                        },
                  child: const Text('Save changes'),
                );
              },
            ),
          ),
        ],
      ),
    ),
  );
}

@override
Widget build(BuildContext context) {
  return PrimaryButton(
    onPressed: () {
      openSheet(
        context: context,
        builder: (context) {
          return buildSheet(context);
        },
        position: OverlayPosition.right,
      );
    },
    child: const Text('Open Sheet'),
  );
}

// Swiper (swiper.md)
OverlayPosition _position = OverlayPosition.left;
bool _typeDrawer = true;

Widget _buildSelectPosition(OverlayPosition position, String label) {
  return SelectedButton(
    value: _position == position,
    onChanged: (value) {
      if (value) {
        setState(() {
          _position = position;
        });
      }
    },
    style: const ButtonStyle.outline(),
    selectedStyle: const ButtonStyle.primary(),
    child: Text(label),
  );
}

@override
Widget build(BuildContext context) {
  return Swiper(
    builder: (context) {
      return Container(
        constraints: const BoxConstraints(
          minWidth: 320,
          minHeight: 320,
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Hello!'),
            const Gap(24),
            PrimaryButton(
              onPressed: () {
                openDrawer(
                  context: context,
                  builder: (context) {
                    return ListView.separated(
                      itemCount: 1000,
                      itemBuilder: (context, index) {
                        return Card(
                          child: Text('Item $index'),
                        );
                      },
                      separatorBuilder: (context, index) {
                        return const Gap(8);
                      },
                    );
                  },
                  position: OverlayPosition.bottom,
                );
              },
              child: const Text('Close'),
            ),
          ],
        ),
      );
    },
    position: _position,
    handler: _typeDrawer ? SwiperHandler.drawer : SwiperHandler.sheet,
    child: SizedBox(
      height: 500,
      child: Card(
        child: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text('Swipe me!'),
              const Gap(24),
              ButtonGroup(
                children: [
                  _buildSelectPosition(OverlayPosition.left, 'Left'),
                  _buildSelectPosition(OverlayPosition.right, 'Right'),
                  _buildSelectPosition(OverlayPosition.top, 'Top'),
                  _buildSelectPosition(OverlayPosition.bottom, 'Bottom'),
                ],
              ),
              const Gap(24),
              ButtonGroup(
                children: [
                  Toggle(
                    value: _typeDrawer,
                    onChanged: (value) {
                      setState(() {
                        _typeDrawer = value;
                      });
                    },
                    child: const Text('Drawer'),
                  ),
                  Toggle(
                    value: !_typeDrawer,
                    onChanged: (value) {
                      setState(() {
                        _typeDrawer = !value;
                      });
                    },
                    child: const Text('Sheet'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    ),
  );
}

// Tooltip (tootltip.md)
Tooltip(
  tooltip: const TooltipContainer(
    child: Text('This is a tooltip.'),
  ),
  child: PrimaryButton(
    onPressed: () {},
    child: const Text('Hover over me'),
  ),
)

// Window (window.md)
final GlobalKey<WindowNavigatorHandle> navigatorKey = GlobalKey();

@override
Widget build(BuildContext context) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      OutlinedContainer(
        height: 600, // for example purpose
        child: WindowNavigator(
          key: navigatorKey,
          initialWindows: [
            Window(
              bounds: const Rect.fromLTWH(0, 0, 200, 200),
              title: const Text('Window 1'),
              content: const RebuildCounter(),
            ),
            Window(
              bounds: const Rect.fromLTWH(200, 0, 200, 200),
              title: const Text('Window 2'),
              content: const RebuildCounter(),
            ),
          ],
          child: const Center(
            child: Text('Desktop'),
          ),
        ),
      ),
      PrimaryButton(
        child: const Text('Add Window'),
        onPressed: () {
          navigatorKey.currentState?.pushWindow(
            Window(
              bounds: const Rect.fromLTWH(0, 0, 200, 200),
              title: Text(
                'Window ${navigatorKey.currentState!.windows.length + 1}',
              ),
              content: const RebuildCounter(),
            ),
          );
        },
      )
    ],
  );
}
```

### üìÅ Navigation

```dart
// Breadcrumb
Breadcrumb(
  separator: Breadcrumb.arrowSeparator,
  children: [
    TextButton(
      onPressed: () {},
      density: ButtonDensity.compact,
      child: const Text('Home'),
    ),
    const MoreDots(),
    TextButton(
      onPressed: () {},
      density: ButtonDensity.compact,
      child: const Text('Components'),
    ),
    const Text('Breadcrumb'),
  ],
)

// DotIndicator
DotIndicator(
  index: _index,
  length: 5,
  onChanged: (index) {
    setState(() {
      _index = index;
    });
  },
)

// ExpandableSidebar (expandable-sidebar.md)
bool expanded = false;
int selected = 0;

NavigationItem buildButton(String text, IconData icon) {
  return NavigationItem(
    label: Text(text),
    alignment: Alignment.centerLeft,
    selectedStyle: const ButtonStyle.primaryIcon(),
    child: Icon(icon),
  );
}

NavigationLabel buildLabel(String label) {
  return NavigationLabel(
    alignment: Alignment.centerLeft,
    child: Text(label).semiBold().muted(),
    // padding: EdgeInsets.zero,
  );
}

@override
Widget build(BuildContext context) {
  final theme = Theme.of(context);
  return OutlinedContainer(
    height: 600,
    width: 800,
    child: Row(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        NavigationRail(
          backgroundColor: theme.colorScheme.card,
          labelType: NavigationLabelType.expanded,
          labelPosition: NavigationLabelPosition.end,
          alignment: NavigationRailAlignment.start,
          expanded: expanded,
          index: selected,
          onSelected: (value) {
            setState(() {
              selected = value;
            });
          },
          children: [
            NavigationButton(
              alignment: Alignment.centerLeft,
              label: const Text('Menu'),
              onPressed: () {
                setState(() {
                  expanded = !expanded;
                });
              },
              child: const Icon(Icons.menu),
            ),
            const NavigationDivider(),
            buildLabel('You'),
            buildButton('Home', Icons.home_filled),
            buildButton('Trending', Icons.trending_up),
            buildButton('Subscription', Icons.subscriptions),
            const NavigationDivider(),
            buildLabel('History'),
            buildButton('History', Icons.history),
            buildButton('Watch Later', Icons.access_time_rounded),
            const NavigationDivider(),
            buildLabel('Movie'),
            buildButton('Action', Icons.movie_creation_outlined),
            buildButton('Horror', Icons.movie_creation_outlined),
            buildButton('Thriller', Icons.movie_creation_outlined),
            const NavigationDivider(),
            buildLabel('Short Films'),
            buildButton('Action', Icons.movie_creation_outlined),
            buildButton('Horror', Icons.movie_creation_outlined),
          ],
        ),
        const VerticalDivider(),
        const Flexible(child: SizedBox()),
      ],
    ),
  );
}

// MenuBar (menu-bar.md)
bool _showBookmarksBar = false;
bool _showFullURLs = true;
int _selectedProfile = 1;

@override
Widget build(BuildContext context) {
  return Menubar(
    children: [
      const MenuButton(
        subMenu: [
          MenuButton(
            leading: Icon(RadixIcons.filePlus),
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyT,
                control: true,
              ),
            ),
            child: Text('New Tab'),
          ),
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyN,
                control: true,
              ),
            ),
            child: Text('New Window'),
          ),
          MenuButton(
            enabled: false,
            child: Text('New Incognito Window'),
          ),
          MenuDivider(),
          MenuButton(
            subMenu: [
              MenuButton(
                child: Text('Email Link'),
              ),
              MenuButton(
                child: Text('Messages'),
              ),
              MenuButton(
                child: Text('Notes'),
              ),
            ],
            child: Text('Share'),
          ),
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyP,
                control: true,
              ),
            ),
            child: Text('Print'),
          ),
        ],
        child: Text('File'),
      ),
      const MenuButton(
        subMenu: [
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyZ,
                control: true,
              ),
            ),
            child: Text('Undo'),
          ),
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyZ,
                control: true,
                shift: true,
              ),
            ),
            child: Text('Redo'),
          ),
          MenuDivider(),
          MenuButton(
            subMenu: [
              MenuButton(
                child: Text('Search the Web'),
              ),
              MenuDivider(),
              MenuButton(
                child: Text('Find...'),
              ),
              MenuButton(
                child: Text('Find Next'),
              ),
              MenuButton(
                child: Text('Find Previous'),
              ),
            ],
            child: Text('Find'),
          ),
          MenuDivider(),
          MenuButton(
            child: Text('Cut'),
          ),
          MenuButton(
            child: Text('Copy'),
          ),
          MenuButton(
            child: Text('Paste'),
          ),
        ],
        child: Text('Edit'),
      ),
      MenuButton(
        subMenu: [
          MenuCheckbox(
            value: _showBookmarksBar,
            onChanged: (context, value) {
              setState(() {
                _showBookmarksBar = value;
              });
            },
            autoClose: false,
            child: const Text('Always Show Bookmarks Bar'),
          ),
          MenuCheckbox(
            value: _showFullURLs,
            onChanged: (context, value) {
              setState(() {
                _showFullURLs = value;
              });
            },
            autoClose: false,
            child: const Text('Always Show Full URLs'),
          ),
          const MenuDivider(),
          const MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyR,
                control: true,
              ),
            ),
            child: Text('Reload'),
          ),
          const MenuButton(
            enabled: false,
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyR,
                control: true,
                shift: true,
              ),
            ),
            child: Text('Force Reload'),
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Toggle Full Screen'),
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Hide Sidebar'),
          ),
        ],
        child: const Text('View'),
      ),
      MenuButton(
        subMenu: [
          MenuRadioGroup<int>(
            value: _selectedProfile,
            onChanged: (context, value) {
              setState(() {
                _selectedProfile = value;
              });
            },
            children: const [
              MenuRadio<int>(
                value: 0,
                autoClose: false,
                child: Text('Andy'),
              ),
              MenuRadio<int>(
                value: 1,
                autoClose: false,
                child: Text('Benoit'),
              ),
              MenuRadio<int>(
                value: 2,
                autoClose: false,
                child: Text('Luis'),
              ),
            ],
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Edit...'),
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Add Profile...'),
          ),
        ],
        child: const Text('Profiles'),
      ),
    ],
  );
}

// NavigationBar (navigation-bar.md)
int selected = 0;

NavigationBarAlignment alignment = NavigationBarAlignment.spaceAround;
bool expands = true;
NavigationLabelType labelType = NavigationLabelType.none;
bool customButtonStyle = true;
bool expanded = true;

NavigationItem buildButton(String label, IconData icon) {
  return NavigationItem(
    style: customButtonStyle
        ? const ButtonStyle.muted(density: ButtonDensity.icon)
        : null,
    selectedStyle: customButtonStyle
        ? const ButtonStyle.fixed(density: ButtonDensity.icon)
        : null,
    label: Text(label),
    child: Icon(icon),
  );
}

@override
Widget build(BuildContext context) {
  return OutlinedContainer(
    width: 500,
    height: 400,
    child: Scaffold(
      footers: [
        const Divider(),
        NavigationBar(
          alignment: alignment,
          labelType: labelType,
          expanded: expanded,
          expands: expands,
          onSelected: (index) {
            setState(() {
              selected = index;
            });
          },
          index: selected,
          children: [
            buildButton('Home', BootstrapIcons.house),
            buildButton('Explore', BootstrapIcons.compass),
            buildButton('Library', BootstrapIcons.musicNoteList),
            buildButton('Profile', BootstrapIcons.person),
            buildButton('App', BootstrapIcons.appIndicator),
          ],
        ),
      ],
      child: Container(
        color: Colors.primaries[Colors.primaries.length - selected - 1],
        padding: const EdgeInsets.all(24),
        child: Card(
          child: Wrap(
            alignment: WrapAlignment.center,
            runAlignment: WrapAlignment.center,
            crossAxisAlignment: WrapCrossAlignment.center,
            runSpacing: 8,
            spacing: 8,
            children: [
              Select<NavigationBarAlignment>(
                value: alignment,
                itemBuilder: (BuildContext context, NavigationBarAlignment item) {
                  return Text(item.name);
                },
                popupWidthConstraint: PopoverConstraint.anchorFixedSize,
                onChanged: (value) {
                  if (value != null) {
                    setState(() {
                      alignment = value;
                    });
                  }
                },
                popup: SelectPopup(
                  items: SelectItemList(
                    children: [
                      for (var value in NavigationBarAlignment.values)
                        SelectItemButton(
                          value: value,
                          child: Text(value.name),
                        ),
                    ],
                  ),
                ),
              ),
              Select<NavigationLabelType>(
                value: labelType,
                itemBuilder: (BuildContext context, NavigationLabelType item) {
                  return Text(item.name);
                },
                popupWidthConstraint: PopoverConstraint.anchorFixedSize,
                onChanged: (value) {
                  if (value != null) {
                    setState(() {
                      labelType = value;
                    });
                  }
                },
                popup: SelectPopup(
                  items: SelectItemList(
                    children: [
                      for (var value in NavigationLabelType.values)
                        SelectItemButton(
                          value: value,
                          child: Text(value.name),
                        ),
                    ],
                  ),
                ),
              ),
              Checkbox(
                state: expands ? CheckboxState.checked : CheckboxState.unchecked,
                onChanged: (value) {
                  setState(() {
                    expands = value == CheckboxState.checked;
                  });
                },
                trailing: const Text('Expands'),
              ),
              Checkbox(
                state: customButtonStyle
                    ? CheckboxState.checked
                    : CheckboxState.unchecked,
                onChanged: (value) {
                  setState(() {
                    customButtonStyle = value == CheckboxState.checked;
                  });
                },
                trailing: const Text('Custom Button Style'),
              ),
              Checkbox(
                state: expanded ? CheckboxState.checked : CheckboxState.unchecked,
                onChanged: (value) {
                  setState(() {
                    expanded = value == CheckboxState.checked;
                  });
                },
                trailing: const Text('Expanded'),
              ),
            ],
          ),
        ),
      ),
    ),
  );
}

// NavigationMenu (navigation-menu.md)
NavigationMenu(
  children: [
    NavigationMenuItem(
      content: NavigationMenuContentList(
        reverse: true,
        children: [
          NavigationMenuContent(
            title: const Text('Introduction'),
            content: const Text(
              'Component library for Flutter based on Shadcn/UI design.',
            ),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Installation'),
            content: const Text(
              'How to install this package in your Flutter project.',
            ),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Typography'),
            content: const Text(
              'Styles and usage of typography in this package.',
            ),
            onPressed: () {},
          ),
          Clickable(
            mouseCursor: const WidgetStatePropertyAll(SystemMouseCursors.click),
            child: Card(
              borderRadius: theme.borderRadiusMd,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  const FlutterLogo(
                    size: 32,
                  ),
                  const Gap(16),
                  const Text('shadcn_flutter').mono().semiBold().large(),
                  const Gap(8),
                  const Text(
                    'Beautifully designed components from Shadcn/UI is now available for Flutter',
                  ).muted(),
                ],
              ),
            ).constrained(maxWidth: 192),
          ),
        ],
      ),
      child: const Text('Getting started'),
    ),
    NavigationMenuItem(
      content: NavigationMenuContentList(
        children: [
          NavigationMenuContent(
            title: const Text('Accordion'),
            content: const Text('Accordion component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Alert'),
            content: const Text('Alert component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Alert Dialog'),
            content: const Text('Alert Dialog component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Animation'),
            content: const Text('Animation component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Avatar'),
            content: const Text('Avatar component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Badge'),
            content: const Text('Badge component for Flutter.'),
            onPressed: () {},
          ),
        ],
      ),
      child: const Text('Components'),
    ),
    NavigationMenuItem(
      content: NavigationMenuContentList(
        crossAxisCount: 2,
        children: [
          // latest news
          NavigationMenuContent(
            title: const Text('Latest news'),
            content: const Text('Stay updated with the latest news.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Change log'),
            content: const Text('View the change log of this package.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Contributors'),
            content: const Text('List of contributors to this package.'),
            onPressed: () {},
          ),
        ],
      ),
      child: const Text('Blog'),
    ),
    NavigationMenuItem(
      onPressed: () {},
      child: const Text('Documentation'),
    ),
  ],
)

// NavigationRail (navigation-rail.md)
int selected = 0;

NavigationRailAlignment alignment = NavigationRailAlignment.start;
NavigationLabelType labelType = NavigationLabelType.none;
NavigationLabelPosition labelPosition = NavigationLabelPosition.bottom;
bool customButtonStyle = false;
bool expanded = true;

NavigationItem buildButton(String label, IconData icon) {
  return NavigationItem(
    style: customButtonStyle
        ? const ButtonStyle.muted(density: ButtonDensity.icon)
        : null,
    selectedStyle: customButtonStyle
        ? const ButtonStyle.fixed(density: ButtonDensity.icon)
        : null,
    label: Text(label),
    child: Icon(icon),
  );
}

@override
Widget build(BuildContext context) {
  return Scaffold(
    child: Row(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        NavigationRail(
          alignment: alignment,
          labelType: labelType,
          index: selected,
          labelPosition: labelPosition,
          expanded: expanded,
          onSelected: (index) {
            setState(() {
              selected = index;
            });
          },
          children: [
            buildButton('Home', BootstrapIcons.house),
            buildButton('Explore', BootstrapIcons.compass),
            buildButton('Library', BootstrapIcons.musicNoteList),
            const NavigationDivider(),
            const NavigationLabel(child: Text('Settings')),
            buildButton('Profile', BootstrapIcons.person),
            buildButton('App', BootstrapIcons.appIndicator),
            const NavigationDivider(),
            const NavigationGap(12),
            const NavigationWidget(
              child: FlutterLogo(),
            ),
          ],
        ),
        const VerticalDivider(),
        Expanded(
          child: Container(
            color: Colors.primaries[Colors.primaries.length - selected - 1],
            padding: const EdgeInsets.all(24),
            child: Card(
              child: Wrap(
                alignment: WrapAlignment.center,
                runAlignment: WrapAlignment.center,
                crossAxisAlignment: WrapCrossAlignment.center,
                runSpacing: 8,
                spacing: 8,
                children: [
                  Select<NavigationRailAlignment>(
                    value: alignment,
                    itemBuilder: (BuildContext context, NavigationRailAlignment item) {
                      return Text(item.name);
                    },
                    popupWidthConstraint: PopoverConstraint.anchorFixedSize,
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          alignment = value;
                        });
                      }
                    },
                    popup: SelectPopup(
                      items: SelectItemList(
                        children: [
                          for (var value in NavigationRailAlignment.values)
                            SelectItemButton(
                              value: value,
                              child: Text(value.name),
                            ),
                        ],
                      ),
                    ),
                  ),
                  Select<NavigationLabelType>(
                    value: labelType,
                    itemBuilder: (BuildContext context, NavigationLabelType item) {
                      return Text(item.name);
                    },
                    popupConstraints: BoxConstraints.tight(const Size(200, 200)),
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          labelType = value;
                        });
                      }
                    },
                    popup: SelectPopup(
                      items: SelectItemList(
                        children: [
                          for (var value in NavigationLabelType.values)
                            SelectItemButton(
                              value: value,
                              child: Text(value.name),
                            ),
                        ],
                      ),
                    ),
                  ),
                  Select<NavigationLabelPosition>(
                    value: labelPosition,
                    itemBuilder: (BuildContext context, NavigationLabelPosition item) {
                      return Text(item.name);
                    },
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          labelPosition = value;
                        });
                      }
                    },
                    popup: SelectPopup(
                      items: SelectItemList(
                        children: [
                          for (var value in NavigationLabelPosition.values)
                            SelectItemButton(
                              value: value,
                              child: Text(value.name),
                            ),
                        ],
                      ),
                    ),
                  ),
                  Checkbox(
                    state: customButtonStyle
                        ? CheckboxState.checked
                        : CheckboxState.unchecked,
                    onChanged: (value) {
                      setState(() {
                        customButtonStyle = value == CheckboxState.checked;
                      });
                    },
                    trailing: const Text('Custom Button Style'),
                  ),
                  Checkbox(
                    state: expanded ? CheckboxState.checked : CheckboxState.unchecked,
                    onChanged: (value) {
                      setState(() {
                        expanded = value == CheckboxState.checked;
                      });
                    },
                    trailing: const Text('Expanded'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    ),
  );
}

// NavigationSidebar (navigation-sidebar.md)
int selected = 0;

NavigationBarItem buildButton(String label, IconData icon) {
  return NavigationItem(
    label: Text(label),
    child: Icon(icon),
  );
}

@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 400,
    child: OutlinedContainer(
      child: NavigationSidebar(
        index: selected,
        onSelected: (index) {
          setState(() {
            selected = index;
          });
        },
        children: [
          const NavigationLabel(child: Text('Discovery')),
          buildButton('Listen Now', BootstrapIcons.playCircle),
          buildButton('Browse', BootstrapIcons.grid),
          buildButton('Radio', BootstrapIcons.broadcast),
          const NavigationGap(24),
          const NavigationDivider(),
          const NavigationLabel(child: Text('Library')),
          buildButton('Playlist', BootstrapIcons.musicNoteList),
          buildButton('Songs', BootstrapIcons.musicNote),
          buildButton('For You', BootstrapIcons.person),
          buildButton('Artists', BootstrapIcons.mic),
          buildButton('Albums', BootstrapIcons.record2),
          const NavigationGap(24),
          const NavigationDivider(),
          const NavigationLabel(child: Text('Playlists')),
          buildButton('Recently Added', BootstrapIcons.musicNoteList),
          buildButton('Recently Played', BootstrapIcons.musicNoteList),
          buildButton('Top Songs', BootstrapIcons.musicNoteList),
          buildButton('Top Albums', BootstrapIcons.musicNoteList),
          buildButton('Top Artists', BootstrapIcons.musicNoteList),
          buildButton('Logic Discography With Some Spice', BootstrapIcons.musicNoteList),
          buildButton('Bedtime Beats', BootstrapIcons.musicNoteList),
          buildButton('Feeling Happy', BootstrapIcons.musicNoteList),
          buildButton('I miss Y2K Pop', BootstrapIcons.musicNoteList),
          buildButton('Runtober', BootstrapIcons.musicNoteList),
        ],
      ),
    ),
  );
}

// Pagination (pagination.md)
int page = 1;

@override
Widget build(BuildContext context) {
  return Pagination(
    page: page,
    totalPages: 20,
    onPageChanged: (value) {
      setState(() {
        page = value;
      });
    },
    maxPages: 3,
  );
}

// TabList (tab-list.md)
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      TabList(
        index: index,
        onChanged: (value) {
          setState(() {
            index = value;
          });
        },
        children: const [
          TabItem(
            child: Text('Tab 1'),
          ),
          TabItem(
            child: Text('Tab 2'),
          ),
          TabItem(
            child: Text('Tab 3'),
          ),
        ],
      ),
      const Gap(16),
      IndexedStack(
        index: index,
        children: const [
          NumberedContainer(
            index: 1,
          ),
          NumberedContainer(
            index: 2,
          ),
          NumberedContainer(
            index: 3,
          ),
        ],
      ).sized(height: 300),
    ],
  );
}

// TabPane (tab-pane.md)
import 'package:shadcn_flutter/shadcn_flutter.dart';

class TabPaneExample1 extends StatefulWidget {
  const TabPaneExample1({super.key});

  @override
  State<TabPaneExample1> createState() => _TabPaneExample1State();
}

class MyTab {
  final String title;
  final int count;
  final String content;
  MyTab(this.title, this.count, this.content);

  @override
  String toString() {
    return 'TabData{title: $title, count: $count, content: $content}';
  }
}

class _TabPaneExample1State extends State<TabPaneExample1> {
  late List<TabPaneData<MyTab>> tabs;
  int focused = 0;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    tabs = [
      for (int i = 0; i < 3; i++)
        TabPaneData(MyTab('Tab ${i + 1}', i + 1, 'Content ${i + 1}')),
    ];
  }

  TabItem _buildTabItem(MyTab data) {
    return TabItem(
      child: ConstrainedBox(
        constraints: const BoxConstraints(minWidth: 150),
        child: Label(
          leading: OutlinedContainer(
            backgroundColor: Colors.white,
            width: 18,
            height: 18,
            borderRadius: Theme.of(context).borderRadiusMd,
            child: Center(
              child: Text(
                data.count.toString(),
                style: const TextStyle(color: Colors.black),
              ).xSmall().bold(),
            ),
          ),
          trailing: IconButton.ghost(
            shape: ButtonShape.circle,
            size: ButtonSize.xSmall,
            icon: const Icon(Icons.close),
            onPressed: () {
              setState(() {
                tabs.remove(data);
              });
            },
          ),
          child: Text(data.title),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return TabPane<MyTab>(
      // children: tabs.map((e) => _buildTabItem(e)).toList(),
      items: tabs,
      itemBuilder: (context, item, index) {
        return _buildTabItem(item.data);
      },
      focused: focused,
      onFocused: (value) {
        setState(() {
          focused = value;
        });
      },
      onSort: (value) {
        setState(() {
          tabs = value;
        });
      },
      leading: [
        IconButton.secondary(
          icon: const Icon(Icons.arrow_drop_down),
          size: ButtonSize.small,
          density: ButtonDensity.iconDense,
          onPressed: () {},
        ),
      ],
      trailing: [
        IconButton.ghost(
          icon: const Icon(Icons.add),
          size: ButtonSize.small,
          density: ButtonDensity.iconDense,
          onPressed: () {
            setState(() {
              int max = tabs.fold<int>(0, (previousValue, element) {
                return element.data.count > previousValue
                    ? element.data.count
                    : previousValue;
              });
              tabs.add(TabPaneData(
                MyTab('Tab ${max + 1}', max + 1, 'Content ${max + 1}'),
              ));
            });
          },
        )
      ],
      child: SizedBox(
        height: 400,
        child: Center(
          child: Text('Tab ${focused + 1}').xLarge().bold(),
        ),
      ),
    );
  }
}

// Tabs (tabs.md)
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      Tabs(
        index: index,
        children: const [
          TabItem(child: Text('Tab 1')),
          TabItem(child: Text('Tab 2')),
          TabItem(child: Text('Tab 3')),
        ],
        onChanged: (int value) {
          setState(() {
            index = value;
          });
        },
      ),
      const Gap(8),
      IndexedStack(
        index: index,
        children: const [
          NumberedContainer(
            index: 1,
          ),
          NumberedContainer(
            index: 2,
          ),
          NumberedContainer(
            index: 3,
          ),
        ],
      ).sized(height: 300),
    ],
  );
}

// Tree (tree.md)
bool expandIcon = false;
bool usePath = true;
bool recursiveSelection = false;

List<TreeNode<String>> treeItems = [
  TreeItem(
    data: 'Apple',
    expanded: true,
    children: [
      TreeItem(
        data: 'Red Apple',
        children: [
          TreeItem(data: 'Red Apple 1'),
          TreeItem(data: 'Red Apple 2'),
        ],
      ),
      TreeItem(data: 'Green Apple'),
    ],
  ),
  TreeItem(
    data: 'Banana',
    children: [
      TreeItem(data: 'Yellow Banana'),
      TreeItem(
        data: 'Green Banana',
        children: [
          TreeItem(data: 'Green Banana 1'),
          TreeItem(data: 'Green Banana 2'),
          TreeItem(data: 'Green Banana 3'),
        ],
      ),
    ],
  ),
  TreeItem(
    data: 'Cherry',
    children: [
      TreeItem(data: 'Red Cherry'),
      TreeItem(data: 'Green Cherry'),
    ],
  ),
  TreeItem(
    data: 'Date',
  ),
  // Tree Root acts as a parent node with no data,
  // it will flatten the children into the parent node
  TreeRoot(
    children: [
      TreeItem(
        data: 'Elderberry',
        children: [
          TreeItem(data: 'Black Elderberry'),
          TreeItem(data: 'Red Elderberry'),
        ],
      ),
      TreeItem(
        data: 'Fig',
        children: [
          TreeItem(data: 'Green Fig'),
          TreeItem(data: 'Purple Fig'),
        ],
      ),
    ],
  ),
];

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      OutlinedContainer(
        child: SizedBox(
          height: 300,
          width: 250,
          child: TreeView(
            expandIcon: expandIcon,
            shrinkWrap: true,
            recursiveSelection: recursiveSelection,
            nodes: treeItems,
            branchLine: usePath ? BranchLine.path : BranchLine.line,
            onSelectionChanged: TreeView.defaultSelectionHandler(
              treeItems,
              (value) {
                setState(() {
                  treeItems = value;
                });
              },
            ),
            builder: (context, node) {
              return TreeItemView(
                onPressed: () {},
                trailing: node.leaf
                    ? Container(
                        width: 16,
                        height: 16,
                        alignment: Alignment.center,
                        child: const CircularProgressIndicator(),
                      )
                    : null,
                leading: node.leaf
                    ? const Icon(BootstrapIcons.fileImage)
                    : Icon(
                        node.expanded
                            ? BootstrapIcons.folder2Open
                            : BootstrapIcons.folder2,
                      ),
                onExpand: TreeView.defaultItemExpandHandler(
                  treeItems,
                  node,
                  (value) {
                    setState(() {
                      treeItems = value;
                    });
                  },
                ),
                child: Text(node.data),
              );
            },
          ),
        ),
      ),
      const Gap(16),
      Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          PrimaryButton(
            onPressed: () {
              setState(() {
                treeItems = treeItems.expandAll();
              });
            },
            child: const Text('Expand All'),
          ),
          const Gap(8),
          PrimaryButton(
            onPressed: () {
              setState(() {
                treeItems = treeItems.collapseAll();
              });
            },
            child: const Text('Collapse All'),
          ),
        ],
      ),
      const Gap(8),
      Checkbox(
        state: expandIcon ? CheckboxState.checked : CheckboxState.unchecked,
        onChanged: (value) {
          setState(() {
            expandIcon = value == CheckboxState.checked;
          });
        },
        trailing: const Text('Expand Icon'),
      ),
      const Gap(8),
      Checkbox(
        state: usePath ? CheckboxState.checked : CheckboxState.unchecked,
        onChanged: (value) {
          setState(() {
            usePath = value == CheckboxState.checked;
          });
        },
        trailing: const Text('Use Path Branch Line'),
      ),
      const Gap(8),
      Checkbox(
        state: recursiveSelection
            ? CheckboxState.checked
            : CheckboxState.unchecked,
        onChanged: (value) {
          setState(() {
            recursiveSelection = value == CheckboxState.checked;
            if (recursiveSelection) {
              treeItems = treeItems.updateRecursiveSelection();
            }
          });
        },
        trailing: const Text('Recursive Selection'),
      ),
    ],
  );
}
```

### üìÅ Display

```dart
// Avatar (avatar.md)
Avatar(
  backgroundColor: Colors.red,
  initials: Avatar.getInitials('sunarya-thito'),
  provider: const NetworkImage(
    'https://avatars.githubusercontent.com/u/64018564?v=4',
  ),
)

// Username Initials
Avatar(
  initials: Avatar.getInitials('sunarya-thito'),
  size: 64,
)

// With Badge
Avatar(
  initials: Avatar.getInitials('sunarya-thito'),
  size: 64,
  badge: const AvatarBadge(
    size: 20,
    color: Colors.green,
  ),
)

// AvatarGroup (avatar-group.md)
List<AvatarWidget> getAvatars() {
  return [
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.red,
    ),
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.green,
    ),
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.blue,
    ),
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.yellow,
    ),
  ];
}

@override
Widget build(BuildContext context) {
  return Wrap(
    spacing: 16,
    runSpacing: 16,
    children: [
      AvatarGroup.toLeft(children: getAvatars()),
      AvatarGroup.toRight(children: getAvatars()),
      AvatarGroup.toTop(children: getAvatars()),
      AvatarGroup.toBottom(children: getAvatars()),
    ],
  );
}

// CodeSnippet (code-snippet.md)
const CodeSnippet(
  code: 'flutter pub get',
  mode: 'shell',
)

// Table (table.md) - Basic Table
TableCell buildHeaderCell(String text, [bool alignRight = false]) {
  return TableCell(
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.centerRight : null,
      child: Text(text).muted().semiBold(),
    ),
  );
}

TableCell buildCell(String text, [bool alignRight = false]) {
  return TableCell(
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.centerRight : null,
      child: Text(text),
    ),
  );
}

@override
Widget build(BuildContext context) {
  return Table(
    rows: [
      TableRow(
        cells: [
          buildHeaderCell('Invoice'),
          buildHeaderCell('Status'),
          buildHeaderCell('Method'),
          buildHeaderCell('Amount', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV001'),
          buildCell('Paid'),
          buildCell('Credit Card'),
          buildCell('\$250.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV002'),
          buildCell('Pending'),
          buildCell('PayPal'),
          buildCell('\$150.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV003'),
          buildCell('Unpaid'),
          buildCell('Bank Transfer'),
          buildCell('\$350.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV004'),
          buildCell('Paid'),
          buildCell('Credit Card'),
          buildCell('\$450.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV005'),
          buildCell('Paid'),
          buildCell('PayPal'),
          buildCell('\$550.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV006'),
          buildCell('Pending'),
          buildCell('Bank Transfer'),
          buildCell('\$200.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV007'),
          buildCell('Unpaid'),
          buildCell('Credit Card'),
          buildCell('\$300.00', true),
        ],
      ),
      TableFooter(
        cells: [
          TableCell(
            columnSpan: 4,
            child: Container(
              padding: const EdgeInsets.all(8),
              child: Row(
                children: [
                  const Text('Total'),
                  Expanded(
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: const Text('\$2,300.00').semiBold(),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    ],
  );
}

// Table (table.md) - Resizable
TableCell buildCell(String text, [bool alignRight = false]) {
  final theme = Theme.of(context);
  return TableCell(
    theme: TableCellTheme(
      border: WidgetStatePropertyAll(
        Border.all(
          color: theme.colorScheme.border,
          strokeAlign: BorderSide.strokeAlignCenter,
        ),
      ),
    ),
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.topRight : null,
      child: Text(text),
    ),
  );
}

final ResizableTableController controller = ResizableTableController(
  defaultColumnWidth: 150,
  defaultRowHeight: 40,
  defaultHeightConstraint: const ConstrainedTableSize(min: 40),
  defaultWidthConstraint: const ConstrainedTableSize(min: 80),
);

@override
Widget build(BuildContext context) {
  return OutlinedContainer(
    child: ResizableTable(
      controller: controller,
      rows: [
        TableHeader(
          cells: [
            buildCell('Invoice'),
            buildCell('Status'),
            buildCell('Method'),
            buildCell('Amount', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV001'),
            buildCell('Paid'),
            buildCell('Credit Card'),
            buildCell('\$250.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV002'),
            buildCell('Pending'),
            buildCell('PayPal'),
            buildCell('\$150.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV003'),
            buildCell('Unpaid'),
            buildCell('Bank Transfer'),
            buildCell('\$350.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV004'),
            buildCell('Paid'),
            buildCell('Credit Card'),
            buildCell('\$450.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV005'),
            buildCell('Paid'),
            buildCell('PayPal'),
            buildCell('\$550.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV006'),
            buildCell('Pending'),
            buildCell('Bank Transfer'),
            buildCell('\$200.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV007'),
            buildCell('Unpaid'),
            buildCell('Credit Card'),
            buildCell('\$300.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV008'),
            buildCell('Paid'),
            buildCell('Credit Card'),
            buildCell('\$250.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV009'),
            buildCell('Pending'),
            buildCell('PayPal'),
            buildCell('\$150.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV010'),
            buildCell('Unpaid'),
            buildCell('Bank Transfer'),
            buildCell('\$350.00', true),
          ],
        ),
      ],
    ),
  );
}

// Table (table.md) - Scrollable
TableCell buildCell(String text, [bool alignRight = false]) {
  final theme = Theme.of(context);
  return TableCell(
    theme: TableCellTheme(
      border: WidgetStatePropertyAll(
        Border.all(
          color: theme.colorScheme.border,
          strokeAlign: BorderSide.strokeAlignCenter,
        ),
      ),
    ),
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.topRight : null,
      child: Text(text),
    ),
  );
}

@override
Widget build(BuildContext context) {
  return ScrollConfiguration(
    behavior: ScrollConfiguration.of(context).copyWith(
      dragDevices: {
        PointerDeviceKind.touch,
        PointerDeviceKind.mouse,
      },
      overscroll: false,
    ),
    child: SizedBox(
      height: 400,
      child: OutlinedContainer(
        child: ScrollableClient(
          diagonalDragBehavior: DiagonalDragBehavior.free,
          builder: (context, offset, viewportSize, child) {
            return Table(
              horizontalOffset: offset.dx,
              verticalOffset: offset.dy,
              viewportSize: viewportSize,
              defaultColumnWidth: const FixedTableSize(150),
              defaultRowHeight: const FixedTableSize(40),
              frozenCells: const FrozenTableData(
                frozenRows: [
                  TableRef(0),
                  TableRef(3),
                ],
                frozenColumns: [
                  TableRef(0),
                  TableRef(2),
                ],
              ),
              rows: [
                TableHeader(
                  cells: [
                    buildCell('Invoice'),
                    buildCell('Status'),
                    buildCell('Method'),
                    buildCell('Amount', true),
                    buildCell('Verification'),
                    buildCell('Last Updated'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV001'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$250.00', true),
                    buildCell('Verified'),
                    buildCell('2 hours ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV002'),
                    buildCell('Pending'),
                    buildCell('PayPal'),
                    buildCell('\$150.00', true),
                    buildCell('Pending'),
                    buildCell('1 day ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV003'),
                    buildCell('Unpaid'),
                    buildCell('Bank Transfer'),
                    buildCell('\$350.00', true),
                    buildCell('Unverified'),
                    buildCell('1 week ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV004'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$450.00', true),
                    buildCell('Verified'),
                    buildCell('2 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV005'),
                    buildCell('Paid'),
                    buildCell('PayPal'),
                    buildCell('\$550.00', true),
                    buildCell('Verified'),
                    buildCell('3 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV006'),
                    buildCell('Pending'),
                    buildCell('Bank Transfer'),
                    buildCell('\$200.00', true),
                    buildCell('Pending'),
                    buildCell('1 month ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV007'),
                    buildCell('Unpaid'),
                    buildCell('Credit Card'),
                    buildCell('\$300.00', true),
                    buildCell('Unverified'),
                    buildCell('1 year ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV008'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$250.00', true),
                    buildCell('Verified'),
                    buildCell('2 hours ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV009'),
                    buildCell('Pending'),
                    buildCell('PayPal'),
                    buildCell('\$150.00', true),
                    buildCell('Pending'),
                    buildCell('1 day ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV010'),
                    buildCell('Unpaid'),
                    buildCell('Bank Transfer'),
                    buildCell('\$350.00', true),
                    buildCell('Unverified'),
                    buildCell('1 week ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV011'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$450.00', true),
                    buildCell('Verified'),
                    buildCell('2 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV012'),
                    buildCell('Paid'),
                    buildCell('PayPal'),
                    buildCell('\$550.00', true),
                    buildCell('Verified'),
                    buildCell('3 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV013'),
                    buildCell('Pending'),
                    buildCell('Bank Transfer'),
                    buildCell('\$200.00', true),
                    buildCell('Pending'),
                    buildCell('1 month ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV014'),
                    buildCell('Unpaid'),
                    buildCell('Credit Card'),
                    buildCell('\$300.00', true),
                    buildCell('Unverified'),
                    buildCell('1 year ago'),
                  ],
                ),
              ],
            );
          },
        ),
      ),
    ),
  );
}

// Tracker (tracker.md)
Tracker(data: data)
```

### üìÅ Utility

```dart
// Badge
const PrimaryBadge(
  child: Text('Primary'),
)

const SecondaryBadge(
  child: Text('Secondary'),
)

const OutlineBadge(
  child: Text('Outline'),
)

const DestructiveBadge(
  child: Text('Destructive'),
)

// Calendar (calendar.md) - Range
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            selectionMode: CalendarSelectionMode.range,
          ),
        ],
      ),
    ),
  );
}

// Calendar (calendar.md) - Single
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            selectionMode: CalendarSelectionMode.single,
            now: DateTime.now(),
          ),
        ],
      ),
    ),
  );
}

// Calendar (calendar.md) - Multiple
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            selectionMode: CalendarSelectionMode.multi,
          ),
        ],
      ),
    ),
  );
}

// Calendar (calendar.md) - Example
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            now: DateTime.now(),
            selectionMode: CalendarSelectionMode.none,
          ),
        ],
      ),
    ),
  );
}

// Chip (chip.md)
Wrap(
  spacing: 8,
  runSpacing: 8,
  children: [
    Chip(
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Apple'),
    ),
    Chip(
      style: const ButtonStyle.primary(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Banana'),
    ),
    Chip(
      style: const ButtonStyle.outline(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Cherry'),
    ),
    Chip(
      style: const ButtonStyle.ghost(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Durian'),
    ),
    Chip(
      style: const ButtonStyle.destructive(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Elderberry'),
    ),
  ],
)

// Command (command.md)
Command(
  builder: (context, query) async* {
    Map<String, List<String>> items = {
      'Suggestions': ['Calendar', 'Search Emoji', 'Launch'],
      'Settings': ['Profile', 'Mail', 'Settings'],
    };
    Map<String, Widget> icons = {
      'Calendar': const Icon(Icons.calendar_today),
      'Search Emoji': const Icon(Icons.emoji_emotions_outlined),
      'Launch': const Icon(Icons.rocket_launch_outlined),
      'Profile': const Icon(Icons.person_outline),
      'Mail': const Icon(Icons.mail_outline),
      'Settings': const Icon(Icons.settings_outlined),
    };
    for (final values in items.entries) {
      List<Widget> resultItems = [];
      for (final item in values.value) {
        if (query == null ||
            item.toLowerCase().contains(query.toLowerCase())) {
          resultItems.add(CommandItem(
            title: Text(item),
            leading: icons[item],
            onTap: () {},
          ));
        }
      }
      if (resultItems.isNotEmpty) {
        await Future.delayed(const Duration(seconds: 1));
        yield [
          CommandCategory(
            title: Text(values.key),
            children: resultItems,
          ),
        ];
      }
    }
  },
).sized(width: 300, height: 300)

// ContextMenu (context-menu.md)
int people = 0;
bool showBookmarksBar = false;
bool showFullUrls = true;

@override
Widget build(BuildContext context) {
  final theme = Theme.of(context);
  return ContextMenu(
    items: [
      const MenuButton(
        trailing: MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.bracketLeft,
            control: true,
          ),
        ),
        child: Text('Back'),
      ),
      const MenuButton(
        trailing: MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.bracketRight,
            control: true,
          ),
        ),
        enabled: false,
        child: Text('Forward'),
      ),
      const MenuButton(
        trailing: MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.keyR,
            control: true,
          ),
        ),
        child: Text('Reload'),
      ),
      const MenuButton(
        subMenu: [
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyS,
                control: true,
              ),
            ),
            child: Text('Save Page As...'),
          ),
          MenuButton(
            child: Text('Create Shortcut...'),
          ),
          MenuButton(
            child: Text('Name Window...'),
          ),
          MenuDivider(),
          MenuButton(
            child: Text('Developer Tools'),
          ),
        ],
        child: Text('More Tools'),
      ),
      const MenuDivider(),
      MenuCheckbox(
        value: showBookmarksBar,
        onChanged: (context, value) {
          setState(() {
            showBookmarksBar = value;
          });
        },
        autoClose: false,
        trailing: const MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.keyB,
            control: true,
            shift: true,
          ),
        ),
        child: const Text('Show Bookmarks Bar'),
      ),
      MenuCheckbox(
        value: showFullUrls,
        onChanged: (context, value) {
          setState(() {
            showFullUrls = value;
          });
        },
        autoClose: false,
        child: const Text('Show Full URLs'),
      ),
      const MenuDivider(),
      const MenuLabel(child: Text('People')),
      const MenuDivider(),
      MenuRadioGroup(
        value: people,
        onChanged: (context, value) {
          setState(() {
            people = value;
          });
        },
        children: const [
          MenuRadio(
            value: 0,
            autoClose: false,
            child: Text('Pedro Duarte'),
          ),
          MenuRadio(
            value: 1,
            autoClose: false,
            child: Text('Colm Tuite'),
          ),
        ],
      ),
    ],
    child: DashedContainer(
      borderRadius: BorderRadius.circular(theme.radiusMd),
      strokeWidth: 2,
      gap: 2,
      child: const Text('Right click here').center(),
    ).constrained(
      maxWidth: 300,
      maxHeight: 200,
    ),
  );
}

// DropdownMenu (dropdown-menu.md)
OutlineButton(
  onPressed: () {
    showDropdown(
      context: context,
      builder: (context) {
        return const DropdownMenu(
          children: [
            MenuLabel(child: Text('My Account')),
            MenuDivider(),
            MenuButton(
              child: Text('Profile'),
            ),
            MenuButton(
              child: Text('Billing'),
            ),
            MenuButton(
              child: Text('Settings'),
            ),
            MenuButton(
              child: Text('Keyboard shortcuts'),
            ),
            MenuDivider(),
            MenuButton(
              child: Text('Team'),
            ),
            MenuButton(
              subMenu: [
                MenuButton(
                  child: Text('Email'),
                ),
                MenuButton(
                  child: Text('Message'),
                ),
                MenuDivider(),
                MenuButton(
                  child: Text('More...'),
                ),
              ],
              child: Text('Invite users'),
            ),
            MenuButton(
              child: Text('New Team'),
            ),
            MenuDivider(),
            MenuButton(
              child: Text('GitHub'),
            ),
            MenuButton(
              child: Text('Support'),
            ),
            MenuButton(
              enabled: false,
              child: Text('API'),
            ),
            MenuButton(
              child: Text('Log out'),
            ),
          ],
        );
      },
    ).future.then((_) {
      print('Closed');
    });
  },
  child: const Text('Open'),
)

// KeyboardDisplay (keyboard-display.md)
const Column(
  children: [
    KeyboardDisplay(
      keys: [
        LogicalKeyboardKey.control,
        LogicalKeyboardKey.alt,
        LogicalKeyboardKey.delete,
      ],
    ),
    Gap(24),
    KeyboardDisplay.fromActivator(
      activator: SingleActivator(
        LogicalKeyboardKey.keyA,
        control: true,
        shift: true,
      ),
    )
  ],
).textSmall()

// OverflowMarquee (overflow-marquee.md)
const SizedBox(
  width: 200,
  child: OverflowMarquee(
    child: Text(
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
    ),
  ),
)

// RefreshTrigger (refresh-trigger.md)
final GlobalKey<RefreshTriggerState> _refreshTriggerKey = GlobalKey<RefreshTriggerState>();

@override
Widget build(BuildContext context) {
  return RefreshTrigger(
    key: _refreshTriggerKey,
    onRefresh: () async {
      await Future.delayed(const Duration(seconds: 2));
    },
    child: SingleChildScrollView(
      child: Container(
        height: 800,
        padding: const EdgeInsets.only(top: 32),
        alignment: Alignment.topCenter,
        child: Column(
          children: [
            const Text('Pull Me'),
            const Gap(16),
            PrimaryButton(
              onPressed: () {
                _refreshTriggerKey.currentState!.refresh();
              },
              child: const Text('Refresh'),
            ),
          ],
        ),
      ),
    ),
  );
}
```

### üìÅ Animation

```dart
// AnimatedValue (animated-value.md)
List<Color> colors = [
  Colors.red,
  Colors.green,
  Colors.blue,
];
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      AnimatedValueBuilder(
        value: colors[index],
        duration: const Duration(seconds: 1),
        lerp: Color.lerp,
        builder: (context, value, child) {
          return Container(
            width: 100,
            height: 100,
            color: value,
          );
        },
      ),
      const Gap(32),
      PrimaryButton(
        onPressed: () {
          setState(() {
            index = (index + 1) % colors.length;
          });
        },
        child: const Text('Change Color'),
      ),
    ],
  );
}

// With Initial Value
List<Color> colors = [
  Colors.red,
  Colors.green,
  Colors.blue,
];
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      AnimatedValueBuilder(
        value: colors[index],
        duration: const Duration(seconds: 1),
        lerp: Color.lerp,
        builder: (context, value, child) {
          return Container(
            width: 100,
            height: 100,
            color: value,
          );
        },
      ),
      const Gap(32),
      PrimaryButton(
        onPressed: () {
          setState(() {
            index = (index + 1) % colors.length;
          });
        },
        child: const Text('Change Color'),
      ),
    ],
  );
}

// NumberTicker (number-ticker.md)
int _number = 0;
final TextEditingController _controller = TextEditingController();

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      NumberTicker(
        initialNumber: 0,
        number: _number,
        style: const TextStyle(fontSize: 32),
        formatter: (number) {
          return NumberFormat.compact().format(number);
        },
      ),
      const Gap(24),
      TextField(
        initialValue: _number.toString(),
        controller: _controller,
        onEditingComplete: () {
          int? number = int.tryParse(_controller.text);
          if (number != null) {
            setState(() {
              _number = number;
            });
          }
        },
      )
    ],
  );
}

// RepeatedAnimation (repeated-animation.md)
RepeatedAnimationBuilder(
  start: const Offset(-100, 0),
  end: const Offset(100, 0),
  duration: const Duration(seconds: 1),
  builder: (context, value, child) {
    return Transform.translate(
      offset: value,
      child: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
    );
  },
)

// Reverse
RepeatedAnimationBuilder(
  start: const Offset(-100, 0),
  end: const Offset(100, 0),
  duration: const Duration(seconds: 1),
  curve: Curves.easeInOutCubic,
  mode: RepeatMode.reverse,
  builder: (context, value, child) {
    return Transform.translate(
      offset: value,
      child: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
    );
  },
)

// Ping Pong
bool play = true;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      RepeatedAnimationBuilder(
        play: play,
        start: const Offset(-100, 0),
        end: const Offset(100, 0),
        duration: const Duration(seconds: 1),
        reverseDuration: const Duration(seconds: 5),
        curve: Curves.linear,
        reverseCurve: Curves.easeInOutCubic,
        mode: RepeatMode.pingPongReverse,
        builder: (context, value, child) {
          return Transform.translate(
            offset: value,
            child: Container(
              width: 100,
              height: 100,
              color: Colors.red,
            ),
          );
        },
      ),
      const Gap(24),
      PrimaryButton(
        onPressed: () {
          setState(() {
            play = !play;
          });
        },
        child: Text(play ? 'Stop' : 'Play'),
      )
    ],
  );
}

// TimelineAnimation (timeline-animation.md)
import 'dart:math';

import 'package:shadcn_flutter/shadcn_flutter.dart';

class TimelineAnimationExample1 extends StatefulWidget {
  const TimelineAnimationExample1({super.key});

  @override
  State<TimelineAnimationExample1> createState() => _TimelineAnimationExample1State();
}

class _TimelineAnimationExample1State extends State<TimelineAnimationExample1>
    with SingleTickerProviderStateMixin {
  final TimelineAnimation<Offset> offsetTimeline = TimelineAnimation(
    keyframes: [
      const AbsoluteKeyframe(
        Duration(seconds: 1),
        Offset(-100, -100),
        Offset(100, -100),
      ),
      const RelativeKeyframe(
        Duration(seconds: 2),
        Offset(100, 100),
      ),
      const RelativeKeyframe(
        Duration(seconds: 1),
        Offset(-100, 100),
      ),
      const RelativeKeyframe(
        Duration(seconds: 2),
        Offset(-100, -100),
      ),
    ],
    lerp: Transformers.typeOffset,
  );
  final TimelineAnimation<double> rotationTimeline = TimelineAnimation(
    keyframes: [
      const AbsoluteKeyframe(
        Duration(seconds: 1),
        0,
        pi / 2,
      ),
      const StillKeyframe(
        Duration(seconds: 2),
      ),
      const RelativeKeyframe(
        Duration(seconds: 1),
        0,
      ),
      const StillKeyframe(
        Duration(seconds: 2),
      ),
    ],
    lerp: Transformers.typeDouble,
  );

  late AnimationController controller;

  @override
  void initState() {
    super.initState();
    controller = AnimationController(
      vsync: this,
      duration: timelineMaxDuration([
        offsetTimeline,
        rotationTimeline,
      ]),
    )..repeat();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: controller,
      builder: (context, child) {
        return Transform.translate(
          offset: offsetTimeline.transformWithController(controller),
          child: Transform.rotate(
            angle: rotationTimeline.transformWithController(controller),
            child: Container(
              width: 50,
              height: 50,
              color: Colors.blue,
            ),
          ),
        );
      },
    );
  }
}
```

### üìÅ Disclosure

```dart
// Accordion (accordion.md)
const Accordion(
  items: [
    AccordionItem(
      trigger: AccordionTrigger(child: Text('Lorem ipsum dolor sit amet')),
      content: Text(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '
        'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '
        'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. '
        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. '
        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
    AccordionItem(
      trigger: AccordionTrigger(
        child: Text(
          'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',
        ),
      ),
      content: Text(
        'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '
        'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. '
        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. '
        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
    AccordionItem(
      trigger: AccordionTrigger(
        child: Text(
          'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat',
        ),
      ),
      content: Text(
        'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. '
        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. '
        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
  ],
)

// Collapsible (collapsible.md)
Collapsible(
  children: [
    const CollapsibleTrigger(
      child: Text('@sunarya-thito starred 3 repositories'),
    ),
    OutlinedContainer(
      child: const Text('@sunarya-thito/shadcn_flutter')
          .small()
          .mono()
          .withPadding(horizontal: 16, vertical: 8),
    ).withPadding(top: 8),
    CollapsibleContent(
      child: OutlinedContainer(
        child: const Text('@flutter/flutter')
            .small()
            .mono()
            .withPadding(horizontal: 16, vertical: 8),
      ).withPadding(top: 8),
    ),
    CollapsibleContent(
      child: OutlinedContainer(
        child: const Text('@dart-lang/sdk')
            .small()
            .mono()
            .withPadding(horizontal: 16, vertical: 8),
      ).withPadding(top: 8),
    ),
  ],
)
```

# Shadcn Flutter - Guidelines & Rules

## Prinsip Dasar

**Gunakan shadcn_flutter sebagai widget utama** - Selalu prioritaskan widget shadcn_flutter sebelum menggunakan widget Flutter standar
**Gunakan toast** - Instead of snackbar bawaan, guanakan toast shadcn
**Konsistensi desain** - Gunakan komponen shadcn untuk memastikan konsistensi visual di seluruh aplikasi
**Bahasa Indonesia** - Semua label, button dan text di aplikasi ini harus berbahasa Indonesia

## Setup & Konfigurasi

### Import yang Benar

```dart
// ‚úÖ BENAR - Gunakan import shadcn_flutter
import 'package:shadcn_flutter/shadcn_flutter.dart';

// ‚ùå SALAH - Jangan import material.dart
import 'package:flutter/material.dart';
```

### Setup Aplikasi

```dart
// Untuk aplikasi pure shadcn tanpa Material
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ShadApp();
  }
}

// Untuk mixing dengan Material
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ShadApp.custom(
      appBuilder: (context, theme) => MaterialApp(
        theme: theme,
        home: MyHomePage(),
      ),
    );
  }
}
```

## Typography

### Penggunaan Text Styles

```dart
// Headlines
const Text('Judul Utama').h1
const Text('Judul Kedua').h2
const Text('Judul Ketiga').h3
const Text('Judul Keempat').h4

// Paragraph dan text styles
const Text('Paragraf normal').p
const Text('Blockquote').blockQuote
const Text('Lead text').lead
const Text('Large text').textLarge
const Text('Small text').textSmall
const Text('Muted text').muted

// Font weights
const Text('Bold text').bold
const Text('Semi bold').semiBold
const Text('Medium text').medium
const Text('Normal text').normal
const Text('Light text').light

// Font sizes
const Text('Extra small').xSmall
const Text('Small').small
const Text('Base').base
const Text('Large').large
const Text('Extra large').xLarge
```

## Layout & Spacing

### Padding dan Margin

```dart
// Padding
Container().withPadding(all: 16)
Container().withPadding(top: 24, bottom: 12, horizontal: 16)

// Margin
Container().withMargin(all: 16)
Container().withMargin(top: 24, bottom: 12, horizontal: 16)

// Center
Container().center()

// Gap untuk spacing
Row(
  children: [
    Text('Item 1'),
    Text('Item 2'),
    Text('Item 3'),
  ],
).gap(32)
```

### Separator

```dart
// Horizontal separator
Column(
  children: [
    Text('Item 1'),
    Text('Item 2'),
    Text('Item 3'),
  ],
).separator(const Divider())

// Vertical separator
Row(
  children: [
    Text('Item 1'),
    Text('Item 2'),
    Text('Item 3'),
  ],
).separator(const VerticalDivider())
```

## Daftar Widget Shadcn yang Tersedia

### üìÅ Control

- Button (button.md)
- IconButton (button.md)

### üìÅ Form

- TextField (text-input.md)
- TextArea (text-area.md)
- AutoComplete (auto-complete.md)
- Checkbox (checkbox.md)
- ChipInput (chip-input.md)
- ColorPicker (color-picker.md)
- DatePicker (date-picker.md)
- FormattedInput (formatted-input.md)
- InputOTP (input-otp.md)
- ItemPicker (item-picker.md)
- MultiSelect (multi-select.md)
- NumberInput (number-input.md)
- PhoneInput (phone-input.md)
- RadioCard (radio-card.md)
- RadioGroup (radio-group.md)
- Select (select.md)
- Slider (slider.md)
- StarRating (star-rating.md)
- Switch (switch.md)
- TimePicker (time-picker.md)
- Toggle (toggle.md)

### üìÅ Layout

- AppBar (appbar.md)
- Card (card.md)
- CardImage (card-image.md)
- Carousel (carousel.md)
- Divider (divider.md)
- Resizable (resizable.md)
- Scaffold (scaffold.md)
- Sortable (sortable.md)
- Stepper (stepper.md)
- Steps (steps.md)
- Timeline (timeline.md)

### üìÅ Feedback

- Alert (alert.md)
- AlertDialog (alert-dialog.md)
- CircularProgress (circular-progress.md)
- LinearProgress (linear-progress.md)
- Progress (progress.md)
- Skeleton (skeleton.md)
- Toast (toast.md)

### üìÅ Overlay

- Dialog (dialog.md)
- Drawer (drawer.md)
- HoverCard (hover-card.md)
- Popover (popover.md)
- Sheet (sheet.md)
- Swiper (swiper.md)
- Tooltip (tootltip.md)
- Window (window.md)

### üìÅ Navigation

- Breadcrumb (breadcrumb.md)
- DotIndicator (dot-indicator.md)
- ExpandableSidebar (expandable-sidebar.md)
- MenuBar (menu-bar.md)
- NavigationBar (navigation-bar.md)
- NavigationMenu (navigation-menu.md)
- NavigationRail (navigation-rail.md)
- NavigationSidebar (navigation-sidebar.md)
- Pagination (pagination.md)
- TabList (tab-list.md)
- TabPane (tab-pane.md)
- Tabs (tabs.md)
- Tree (tree.md)

### üìÅ Display

- Avatar (avatar.md)
- AvatarGroup (avatar-group.md)
- CodeSnippet (code-snippet.md)
- Table (table.md)
- Tracker (tracker.md)

### üìÅ Utility

- Badge (badge.md)
- Calendar (calendar.md)
- Chip (chip.md)
- Command (command.md)
- ContextMenu (context-menu.md)
- DropdownMenu (dropdown-menu.md)
- KeyboardDisplay (keyboard-display.md)
- OverflowMarquee (overflow-marquee.md)
- RefreshTrigger (refresh-trigger.md)

### üìÅ Animation

- AnimatedValue (animated-value.md)
- NumberTicker (number-ticker.md)
- RepeatedAnimation (repeated-animation.md)
- TimelineAnimation (timeline-animation.md)

### üìÅ Disclosure

- Accordion (accordion.md)
- Collapsible (collapsible.md)

## Cara Penggunaan Widget

### üìÅ Control

#### üéØ AllnimallButton - Custom Button dengan Animasi

**Gunakan AllnimallButton sebagai pengganti button shadcn_flutter standar** - Widget custom dengan efek hover shadow, bounce, dan animasi yang smooth.

```dart
// Import yang diperlukan
import 'package:allnimall_store/src/widgets/allnimall_button.dart';

// PRIMARY - Button dengan warna primary
AllnimallButton.primary(
  onPressed: () {},
  child: const Text('Masuk'),
)

// SECONDARY - Button dengan warna secondary
AllnimallButton.secondary(
  onPressed: () {},
  child: const Text('Batal'),
)

// OUTLINE - Button dengan border outline
AllnimallButton.outline(
  onPressed: () {},
  child: const Text('Simpan'),
)

// GHOST - Button transparan
AllnimallButton.ghost(
  onPressed: () {},
  child: const Text('Hapus'),
)

// DESTRUCTIVE - Button dengan warna error
AllnimallButton.destructive(
  onPressed: () {},
  child: const Text('Hapus Permanen'),
)

// LOADING STATE - Button dengan loading indicator
AllnimallButton.primary(
  onPressed: () {},
  isLoading: true,
  child: const Text('Memproses...'),
)

// CUSTOM SIZES - Button dengan ukuran custom
AllnimallButton.primary(
  onPressed: () {},
  width: 200,
  height: 56,
  child: const Text('Button Besar'),
)

// CUSTOM PADDING - Button dengan padding custom
AllnimallButton.primary(
  onPressed: () {},
  padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
  child: const Text('Button dengan Padding'),
)

// CUSTOM BORDER RADIUS - Button dengan border radius custom
AllnimallButton.primary(
  onPressed: () {},
  borderRadius: BorderRadius.circular(20),
  child: const Text('Button Rounded'),
)
```

#### üéØ AllnimallIconButton - Custom IconButton dengan Animasi

**Gunakan AllnimallIconButton sebagai pengganti IconButton shadcn_flutter standar** - Widget custom dengan efek hover shadow, bounce, dan animasi yang smooth.

```dart
// Import yang diperlukan
import 'package:allnimall_store/src/widgets/allnimall_icon_button.dart';

// PRIMARY - IconButton dengan warna primary
AllnimallIconButton.primary(
  onPressed: () {},
  icon: const Icon(Icons.add),
)

// SECONDARY - IconButton dengan warna secondary
AllnimallIconButton.secondary(
  onPressed: () {},
  icon: const Icon(Icons.edit),
)

// OUTLINE - IconButton dengan border outline
AllnimallIconButton.outline(
  onPressed: () {},
  icon: const Icon(Icons.delete),
)

// GHOST - IconButton transparan
AllnimallIconButton.ghost(
  onPressed: () {},
  icon: const Icon(Icons.more_vert),
)

// DESTRUCTIVE - IconButton dengan warna error
AllnimallIconButton.destructive(
  onPressed: () {},
  icon: const Icon(Icons.close),
)

// LOADING STATE - IconButton dengan loading indicator
AllnimallIconButton.primary(
  onPressed: () {},
  isLoading: true,
  icon: const Icon(Icons.refresh),
)

// CUSTOM SIZES - IconButton dengan ukuran custom
AllnimallIconButton.primary(
  onPressed: () {},
  size: 56,
  icon: const Icon(Icons.add, size: 24),
)

// CUSTOM PADDING - IconButton dengan padding custom
AllnimallIconButton.primary(
  onPressed: () {},
  padding: const EdgeInsets.all(16),
  icon: const Icon(Icons.add),
)

// CUSTOM BORDER RADIUS - IconButton dengan border radius custom
AllnimallIconButton.primary(
  onPressed: () {},
  borderRadius: BorderRadius.circular(16),
  icon: const Icon(Icons.add),
)
```

#### ‚ùå Button Shadcn Flutter Standar (TIDAK DIGUNAKAN)

**Jangan gunakan button shadcn_flutter standar** - Gunakan AllnimallButton sebagai gantinya.

````dart
// ‚ùå SALAH - Jangan gunakan button standar
PrimaryButton(
  onPressed: () {},
  child: const Text('Primary'),
)

SecondaryButton(
  onPressed: () {},
  child: const Text('Secondary'),
)

OutlineButton(
  onPressed: () {},
  child: const Text('Outlined'),
)

GhostButton(
  onPressed: () {},
  child: const Text('Ghost'),
)

DestructiveButton(
  onPressed: () {},
  child: const Text('Destructive'),
)

// ‚ùå SALAH - Jangan gunakan IconButton standar
IconButton(
  onPressed: () {},
  icon: const Icon(Icons.add),
)

IconButton.secondary(
  onPressed: () {},
  icon: const Icon(Icons.edit),
)

IconButton.outline(
  onPressed: () {},
  icon: const Icon(Icons.delete),
)

IconButton.ghost(
  onPressed: () {},
  icon: const Icon(Icons.more_vert),
)

IconButton.destructive(
  onPressed: () {},
  icon: const Icon(Icons.close),
)

IconButton.loading(
  onPressed: () {},
  icon: const Icon(Icons.refresh),
)

### üìÅ Form

```dart
// AutoComplete
AutoComplete(
  suggestions: _currentSuggestions,
  child: TextField(
    controller: _controller,
    onChanged: _updateSuggestions,
    trailing: const IconButton.text(
      density: ButtonDensity.compact,
      icon: Icon(Icons.clear),
      onPressed: clearActiveTextInput,
    ),
  ),
)

// Checkbox
Checkbox(
  state: _state,
  onChanged: (value) {
    setState(() {
      _state = value;
    });
  },
  trailing: const Text('Remember me'),
)

// Checkbox with tristate
Checkbox(
  state: _state,
  onChanged: (value) {
    setState(() {
      _state = value;
    });
  },
  trailing: const Text('Remember me'),
  tristate: true,
)

// ChipInput
ChipInput<String>(
  controller: _controller,
  onSubmitted: (value) {
    setState(() {
      _chips.add(value);
      _suggestions.clear();
      _controller.clear();
    });
  },
  suggestions: _suggestions,
  onSuggestionChoosen: (index) {
    setState(() {
      _chips.add(_suggestions[index]);
      _controller.clear();
    });
  },
  onChanged: (value) {
    setState(() {
      _chips = value;
    });
  },
  chips: _chips,
  chipBuilder: (context, chip) {
    return Text(chip);
  },
)

// ColorPicker
ColorInput(
  color: color,
  mode: PromptMode.popover,
  onChanged: (value) {
    setState(() {
      color = value;
    });
  },
  storage: ColorHistoryStorage.of(context),
)

// DatePicker (date-picker.md)
DateTime? _value;
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      DatePicker(
        value: _value,
        mode: PromptMode.popover,
        stateBuilder: (date) {
          if (date.isAfter(DateTime.now())) {
            return DateState.disabled;
          }
          return DateState.enabled;
        },
        onChanged: (value) {
          setState(() {
            _value = value;
          });
        },
      ),
      const Gap(16),
      DatePicker(
        value: _value,
        mode: PromptMode.dialog,
        dialogTitle: const Text('Select Date'),
        stateBuilder: (date) {
          if (date.isAfter(DateTime.now())) {
            return DateState.disabled;
          }
          return DateState.enabled;
        },
        onChanged: (value) {
          setState(() {
            _value = value;
          });
        },
      ),
    ],
  );
}

// DatePicker Date Range
DateTimeRange? _value;
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      DateRangePicker(
        value: _value,
        mode: PromptMode.popover,
        onChanged: (value) {
          setState(() {
            _value = value;
          });
        },
      ),
      const Gap(16),
      DateRangePicker(
        value: _value,
        mode: PromptMode.dialog,
        dialogTitle: const Text('Select Date Range'),
        onChanged: (value) {
          setState(() {
            _value = value;
          });
        },
      ),
    ],
  );
}

// Form (form.md) - Form Table Layout
final _usernameKey = const TextFieldKey('username');
final _passwordKey = const TextFieldKey('password');
final _confirmPasswordKey = const TextFieldKey('confirmPassword');

@override
Widget build(BuildContext context) {
  return SizedBox(
    width: 480,
    child: Form(
      onSubmit: (context, values) {
        // Get the values individually
        String? username = _usernameKey[values];
        String? password = _passwordKey[values];
        String? confirmPassword = _confirmPasswordKey[values];
        // or just encode the whole map to JSON directly
        String json = jsonEncode(values.map((key, value) {
          return MapEntry(key.key, value);
        }));
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('Form Values'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('Username: $username'),
                  Text('Password: $password'),
                  Text('Confirm Password: $confirmPassword'),
                  Text('JSON: $json'),
                ],
              ),
              actions: [
                PrimaryButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Close'),
                ),
              ],
            );
          },
        );
      },
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          FormTableLayout(
            rows: [
              FormField(
                key: _usernameKey,
                label: const Text('Username'),
                hint: const Text('This is your public display name'),
                validator: const LengthValidator(min: 4),
                child: const TextField(
                  initialValue: 'sunarya-thito',
                ),
              ),
              FormField(
                key: _passwordKey,
                label: const Text('Password'),
                validator: const LengthValidator(min: 8),
                child: const TextField(
                  obscureText: true,
                ),
              ),
              FormField(
                key: _confirmPasswordKey,
                label: const Text('Confirm Password'),
                validator: CompareWith.equal(_passwordKey,
                    message: 'Passwords do not match'),
                child: const TextField(
                  obscureText: true,
                ),
              ),
            ],
          ),
          const Gap(24),
          FormErrorBuilder(
            builder: (context, errors, child) {
              return PrimaryButton(
                onPressed: errors.isEmpty ? () => context.submitForm() : null,
                child: const Text('Submit'),
              );
            },
          )
        ],
      ),
    ),
  );
}

// Form (form.md) - Form Column Layout
final _usernameKey = const TextFieldKey(#username);
final _passwordKey = const TextFieldKey(#password);
final _confirmPasswordKey = const TextFieldKey(#confirmPassword);
final _agreeKey = const CheckboxKey(#agree);
CheckboxState state = CheckboxState.unchecked;

@override
Widget build(BuildContext context) {
  return SizedBox(
    width: 480,
    child: Form(
      onSubmit: (context, values) {
        // Get the values individually
        String? username = _usernameKey[values];
        String? password = _passwordKey[values];
        String? confirmPassword = _confirmPasswordKey[values];
        CheckboxState? agree = _agreeKey[values];
        // or just encode the whole map to JSON directly
        String json = jsonEncode(values.map((key, value) {
          return MapEntry(key.key, value);
        }));
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('Form Values'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('Username: $username'),
                  Text('Password: $password'),
                  Text('Confirm Password: $confirmPassword'),
                  Text('Agree: $agree'),
                  Text('JSON: $json'),
                ],
              ),
              actions: [
                PrimaryButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Close'),
                ),
              ],
            );
          },
        );
      },
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              FormField(
                key: _usernameKey,
                label: const Text('Username'),
                hint: const Text('This is your public display name'),
                validator: const LengthValidator(min: 4),
                showErrors: const {
                  FormValidationMode.changed,
                  FormValidationMode.submitted
                },
                child: const TextField(),
              ),
              FormField(
                key: _passwordKey,
                label: const Text('Password'),
                validator: const LengthValidator(min: 8),
                showErrors: const {
                  FormValidationMode.changed,
                  FormValidationMode.submitted
                },
                child: const TextField(
                  obscureText: true,
                ),
              ),
              FormField(
                key: _confirmPasswordKey,
                label: const Text('Confirm Password'),
                validator: CompareWith.equal(_passwordKey,
                    message: 'Passwords do not match'),
                showErrors: const {
                  FormValidationMode.changed,
                  FormValidationMode.submitted
                },
                child: const TextField(
                  obscureText: true,
                ),
              ),
              FormInline(
                key: _agreeKey,
                label: const Text('I agree to the terms and conditions'),
                validator: const CompareTo.equal(CheckboxState.checked,
                    message: 'You must agree to the terms and conditions'),
                showErrors: const {
                  FormValidationMode.changed,
                  FormValidationMode.submitted
                },
                child: Align(
                  alignment: AlignmentDirectional.centerEnd,
                  child: Checkbox(
                      state: state,
                      onChanged: (value) {
                        setState(() {
                          state = value;
                        });
                      }),
                ),
              ),
            ],
          ).gap(24),
          const Gap(24),
          FormErrorBuilder(
            builder: (context, errors, child) {
              return PrimaryButton(
                onPressed: errors.isEmpty ? () => context.submitForm() : null,
                child: const Text('Submit'),
              );
            },
          )
        ],
      ),
    ),
  );
}

// Form (form.md) - Form Dengan Validation
final _dummyData = [
  'sunarya-thito',
  'septogeddon',
  'shadcn',
];

final _usernameKey = const TextFieldKey('username');
final _passwordKey = const TextFieldKey('password');
final _confirmPasswordKey = const TextFieldKey('confirmPassword');

@override
Widget build(BuildContext context) {
  return SizedBox(
    width: 480,
    child: Form(
      onSubmit: (context, values) {
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('Form Values'),
              content: Text(jsonEncode(values.map(
                (key, value) {
                  return MapEntry(key.key, value);
                },
              ))),
              actions: [
                PrimaryButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Close'),
                ),
              ],
            );
          },
        );
      },
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          FormTableLayout(
            rows: [
              FormField(
                key: _usernameKey,
                label: const Text('Username'),
                hint: const Text('This is your public display name'),
                validator: const LengthValidator(min: 4) &
                    ValidationMode(
                      ConditionalValidator((value) async {
                        // simulate a network delay for example purpose
                        await Future.delayed(const Duration(seconds: 1));
                        return !_dummyData.contains(value);
                      }, message: 'Username already taken'),
                      // only validate when the form is submitted
                      mode: {FormValidationMode.submitted},
                    ),
                child: const TextField(
                  initialValue: 'sunarya-thito',
                ),
              ),
              FormField(
                key: _passwordKey,
                label: const Text('Password'),
                validator: const LengthValidator(min: 8),
                showErrors: const {
                  FormValidationMode.submitted,
                  FormValidationMode.changed
                },
                child: const TextField(
                  obscureText: true,
                ),
              ),
              FormField<String>(
                key: _confirmPasswordKey,
                label: const Text('Confirm Password'),
                showErrors: const {
                  FormValidationMode.submitted,
                  FormValidationMode.changed
                },
                validator: CompareWith.equal(_passwordKey,
                    message: 'Passwords do not match'),
                child: const TextField(
                  obscureText: true,
                ),
              ),
            ],
          ),
          const Gap(24),
          const SubmitButton(
            loadingTrailing: AspectRatio(
              aspectRatio: 1,
              child: CircularProgressIndicator(
                onSurface: true,
              ),
            ),
            child: Text('Register'),
          ),
        ],
      ),
    ),
  );
}

// FormattedInput (formatted-input.md)
FormattedInput(
  onChanged: (value) {
    List<String> parts = [];
    for (FormattedValuePart part in value.values) {
      parts.add(part.value ?? '');
    }
    print(parts.join('/'));
  },
  initialValue: FormattedValue([
    const InputPart.editable(length: 2, width: 40, placeholder: Text('MM'))
        .withValue('01'),
    const InputPart.static('/'),
    const InputPart.editable(length: 2, width: 40, placeholder: Text('DD'))
        .withValue('02'),
    const InputPart.static('/'),
    const InputPart.editable(length: 4, width: 60, placeholder: Text('YYYY'))
        .withValue('2021'),
  ]),
)

// FormattedInput Date Input
DateTime? _selectedDate;
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      DateInput(
        onChanged: (value) => setState(() => _selectedDate = value),
      ),
      const Gap(16),
      if (_selectedDate != null) Text('Selected date: $_selectedDate'),
    ],
  );
}

// FormattedInput Time Input
TimeOfDay? _selected;
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      TimeInput(
        onChanged: (value) => setState(() => _selected = value),
      ),
      const Gap(16),
      if (_selected != null) Text('Selected time: $_selected'),
    ],
  );
}

// FormattedInput Duration Input
Duration? _selected;
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      DurationInput(
        onChanged: (value) => setState(() => _selected = value),
        showSeconds: true,
      ),
      const Gap(16),
      if (_selected != null) Text('Selected duration: $_selected'),
    ],
  );
}

// InputOTP (input-otp.md) - Basic
String value = '';
String? submittedValue;
@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      InputOTP(
        onChanged: (value) {
          setState(() {
            this.value = value.otpToString();
          });
        },
        onSubmitted: (value) {
          setState(() {
            submittedValue = value.otpToString();
          });
        },
        children: [
          InputOTPChild.character(allowDigit: true),
          InputOTPChild.character(allowDigit: true),
          InputOTPChild.character(allowDigit: true),
          InputOTPChild.separator,
          InputOTPChild.character(allowDigit: true),
          InputOTPChild.character(allowDigit: true),
          InputOTPChild.character(allowDigit: true),
        ],
      ),
      gap(16),
      Text('Value: $value'),
      Text('Submitted Value: $submittedValue'),
    ],
  );
}

// InputOTP (input-otp.md) - With Initial Value
InputOTP(
  initialValue: '123'.codeUnits,
  children: [
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.separator,
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
    InputOTPChild.character(allowDigit: true),
  ],
)

// InputOTP (input-otp.md) - Obscured
InputOTP(
  children: [
    InputOTPChild.character(allowDigit: true, obscured: true),
    InputOTPChild.character(allowDigit: true, obscured: true),
    InputOTPChild.character(allowDigit: true, obscured: true),
    InputOTPChild.separator,
    InputOTPChild.character(allowDigit: true, obscured: true),
    InputOTPChild.character(allowDigit: true, obscured: true),
    InputOTPChild.character(allowDigit: true, obscured: true),
  ],
)

// InputOTP (input-otp.md) - Uppercase Alphabet
InputOTP(
  children: [
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.separator,
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.separator,
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
    InputOTPChild.character(
        allowLowercaseAlphabet: true,
        allowUppercaseAlphabet: true,
        onlyUppercaseAlphabet: true),
  ],
)

// ItemPicker (item-picker.md) - Basic
PrimaryButton(
  onPressed: () {
    showItemPicker<int>(
      context,
      title: Text('Pick an item'),
      items: ItemBuilder(
        itemCount: 1000,
        itemBuilder: (index) {
          return index;
        },
      ),
      builder: (context, item) {
        return ItemPickerOption(
            value: item, child: Text(item.toString()).large);
      },
    ).then(
      (value) {
        if (value != null) {
          showToast(
            context: context,
            builder: (context, overlay) {
              return SurfaceCard(
                child: Text('You picked $value!'),
              );
            },
          );
        } else {
          showToast(
            context: context,
            builder: (context, overlay) {
              return const SurfaceCard(
                child: Text('You picked nothing!'),
              );
            },
          );
        }
      },
    );
  },
  child: const Text('Show Item Picker'),
)

// ItemPicker (item-picker.md) - With Dialog
PrimaryButton(
  onPressed: () {
    showItemPickerDialog<int>(
      context,
      title: const Text('Pick a number'),
      items: ItemBuilder(
        itemBuilder: (index) {
          return index;
        },
      ),
      builder: (context, item) {
        return ItemPickerOption(
            value: item, child: Text(item.toString()).large);
      },
    ).then(
      (value) {
        if (value != null) {
          showToast(
            context: context,
            builder: (context, overlay) {
              return SurfaceCard(
                child: Text('You picked $value!'),
              );
            },
          );
        } else {
          showToast(
            context: context,
            builder: (context, overlay) {
              return const SurfaceCard(
                child: Text('You picked nothing!'),
              );
            },
          );
        }
      },
    );
  },
  child: const Text('Show Item Picker'),
)

// ItemPicker (item-picker.md) - Fixed List Item
final List<NamedColor> colors = const [
  NamedColor('Red', Colors.red),
  NamedColor('Green', Colors.green),
  NamedColor('Blue', Colors.blue),
  NamedColor('Yellow', Colors.yellow),
  NamedColor('Purple', Colors.purple),
  NamedColor('Cyan', Colors.cyan),
  NamedColor('Orange', Colors.orange),
  NamedColor('Pink', Colors.pink),
  NamedColor('Teal', Colors.teal),
  NamedColor('Amber', Colors.amber),
];
int selectedColor = 0;
@override
Widget build(BuildContext context) {
  return PrimaryButton(
    onPressed: () {
      showItemPickerDialog<NamedColor>(
        context,
        items: ItemList(colors),
        initialValue: colors[selectedColor],
        title: const Text('Pick a color'),
        builder: (context, item) {
          return ItemPickerOption(
            value: item,
            selectedStyle: const ButtonStyle.primary(
              shape: ButtonShape.circle,
            ),
            style: const ButtonStyle.ghost(
              shape: ButtonShape.circle,
            ),
            label: Text(item.name),
            child: Container(
              padding: const EdgeInsets.all(8),
              width: 100,
              height: 100,
              alignment: Alignment.center,
              decoration:
                  BoxDecoration(color: item.color, shape: BoxShape.circle),
            ),
          );
        },
      ).then(
        (value) {
          if (value != null) {
            selectedColor = colors.indexOf(value);
            showToast(
              context: context,
              builder: (context, overlay) {
                return SurfaceCard(
                  child: Text('You picked ${value.name}!'),
                );
              },
            );
          } else {
            showToast(
              context: context,
              builder: (context, overlay) {
                return const SurfaceCard(
                  child: Text('You picked nothing!'),
                );
              },
            );
          }
        },
      );
    },
    child: const Text('Show Item Picker'),
  );
}

// ItemPicker (item-picker.md) - Form Example
final List<NamedColor> colors = const [
  NamedColor('Red', Colors.red),
  NamedColor('Green', Colors.green),
  NamedColor('Blue', Colors.blue),
  NamedColor('Yellow', Colors.yellow),
  NamedColor('Purple', Colors.purple),
  NamedColor('Cyan', Colors.cyan),
  NamedColor('Orange', Colors.orange),
  NamedColor('Pink', Colors.pink),
  NamedColor('Teal', Colors.teal),
  NamedColor('Amber', Colors.amber),
];
int selectedColor = 0;
@override
Widget build(BuildContext context) {
  return ItemPicker<NamedColor>(
    items: ItemList(colors),
    mode: PromptMode.popover,
    title: const Text('Pick a color'),
    builder: (context, item) {
      return ItemPickerOption(
        value: item,
        label: Text(item.name),
        style: const ButtonStyle.ghostIcon(
          shape: ButtonShape.circle,
        ),
        selectedStyle: const ButtonStyle.primary(
          shape: ButtonShape.circle,
        ),
        child: Container(
          constraints: const BoxConstraints(minWidth: 40, minHeight: 40),
          decoration: BoxDecoration(
            color: item.color,
            shape: BoxShape.circle,
          ),
        ),
      );
    },
    value: colors[selectedColor],
    placeholder: const Text('Pick a color'),
    onChanged: (value) {
      print('You picked $value!');
      if (value != null) {
        setState(() {
          selectedColor = colors.indexOf(value);
        });
      }
    },
  );
}

// MultiSelect (multi-select.md) - Basic
Iterable<String>? selectedValues;
@override
Widget build(BuildContext context) {
  return MultiSelect<String>(
    itemBuilder: (context, item) {
      return MultiSelectChip(value: item, child: Text(item));
    },
    popup: const SelectPopup(
      items: SelectItemList(children: [
        SelectItemButton(
          value: 'Apple',
          child: Text('Apple'),
        ),
        SelectItemButton(
          value: 'Banana',
          child: Text('Banana'),
        ),
        SelectItemButton(
          value: 'Cherry',
          child: Text('Cherry'),
        ),
      ]),
    ),
    onChanged: (value) {
      setState(() {
        selectedValues = value;
      });
    },
    constraints: const BoxConstraints(
      minWidth: 200,
    ),
    value: selectedValues,
    placeholder: const Text('Select a fruit'),
  );
}

// MultiSelect (multi-select.md) - With Search
final Map<String, List<String>> fruits = {
  'Apple': ['Red Apple', 'Green Apple'],
  'Banana': ['Yellow Banana', 'Brown Banana'],
  'Lemon': ['Yellow Lemon', 'Green Lemon'],
  'Tomato': ['Red', 'Green', 'Yellow', 'Brown'],
};
Iterable<String>? selectedValues;

Iterable<MapEntry<String, List<String>>> _filteredFruits(
    String searchQuery) sync* {
  for (final entry in fruits.entries) {
    final filteredValues = entry.value
        .where((value) => _filterName(value, searchQuery))
        .toList();
    if (filteredValues.isNotEmpty) {
      yield MapEntry(entry.key, filteredValues);
    } else if (_filterName(entry.key, searchQuery)) {
      yield entry;
    }
  }
}

bool _filterName(String name, String searchQuery) {
  return name.toLowerCase().contains(searchQuery);
}

@override
Widget build(BuildContext context) {
  return MultiSelect<String>(
    itemBuilder: (context, item) {
      return MultiSelectChip(value: item, child: Text(item));
    },
    popup: SelectPopup.builder(
      searchPlaceholder: const Text('Search fruit'),
      builder: (context, searchQuery) {
        final filteredFruits = searchQuery == null
            ? fruits.entries
            : _filteredFruits(searchQuery);
        return SelectItemList(
          children: [
            for (final entry in filteredFruits)
              SelectGroup(
                headers: [
                  SelectLabel(
                    child: Text(entry.key),
                  ),
                ],
                children: [
                  for (final value in entry.value)
                    SelectItemButton(
                      value: value,
                      child: Text(value),
                    ),
                ],
              ),
          ],
        );
      },
    ),
    onChanged: (value) {
      setState(() {
        selectedValues = value;
      });
    },
    constraints: const BoxConstraints(
      minWidth: 200,
    ),
    value: selectedValues,
    placeholder: const Text('Select a fruit'),
  );
}

// NumberInput (number-input.md) - Basic
double value = 0;
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      SizedBox(
        width: 100,
        child: TextField(
          initialValue: value.toString(),
          onChanged: (value) {
            setState(() {
              this.value = double.tryParse(value) ?? 0;
            });
          },
          features: const [
            InputFeature.spinner(),
          ],
          submitFormatters: [
            TextInputFormatters.mathExpression(),
          ],
        ),
      ),
      gap(8),
      Text('Value: $value'),
    ],
  );
}

// PhoneInput (phone-input.md) - Basic
PhoneNumber? _phoneNumber;
@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      PhoneInput(
        initialCountry: Country.indonesia,
        onChanged: (value) {
          setState(() {
            _phoneNumber = value;
          });
        },
      ),
      const Gap(24),
      Text(
        _phoneNumber?.value ?? '(No value)',
      ),
    ],
  );
}

// RadioCard (radio-card.md) - Basic
int value = 1;
@override
Widget build(BuildContext context) {
  return RadioGroup(
    value: value,
    onChanged: (value) {
      setState(() {
        this.value = value;
      });
    },
    child: const Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        RadioCard(
          value: 1,
          child: Basic(
            title: Text('8-core CPU'),
            content: Text('32 GB RAM'),
          ),
        ),
        RadioCard(
          value: 2,
          child: Basic(
            title: Text('6-core CPU'),
            content: Text('24 GB RAM'),
          ),
        ),
        RadioCard(
          value: 3,
          child: Basic(
            title: Text('4-core CPU'),
            content: Text('16 GB RAM'),
          ),
        ),
      ],
    ).gap(12),
  );
}

// RadioGroup (radio-group.md) - Basic
int? selectedValue;

@override
Widget build(BuildContext context) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      RadioGroup<int>(
        value: selectedValue,
        onChanged: (value) {
          setState(() {
            selectedValue = value;
          });
        },
        child: const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            RadioItem(
              value: 1,
              trailing: Text('Option 1'),
            ),
            RadioItem(
              value: 2,
              trailing: Text('Option 2'),
            ),
            RadioItem(
              value: 3,
              trailing: Text('Option 3'),
            ),
          ],
        ),
      ),
      const Gap(16),
      Text('Selected: $selectedValue'),
    ],
  );
}

// Select (select.md) - Basic
String? selectedValue;
@override
Widget build(BuildContext context) {
  return Select<String>(
    itemBuilder: (context, item) {
      return Text(item);
    },
    popupConstraints: const BoxConstraints(
      maxHeight: 300,
      maxWidth: 200,
    ),
    onChanged: (value) {
      setState(() {
        selectedValue = value;
      });
    },
    value: selectedValue,
    placeholder: const Text('Select a fruit'),
    popup: const SelectPopup(
      items: SelectItemList(
        children: [
          SelectItemButton(
            value: 'Apple',
            child: Text('Apple'),
          ),
          SelectItemButton(
            value: 'Banana',
            child: Text('Banana'),
          ),
          SelectItemButton(
            value: 'Cherry',
            child: Text('Cherry'),
          ),
        ],
      ),
    ),
  );
}

// Select (select.md) - With Search
final Map<String, List<String>> fruits = {
  'Apple': ['Red Apple', 'Green Apple'],
  'Banana': ['Yellow Banana', 'Brown Banana'],
  'Lemon': ['Yellow Lemon', 'Green Lemon'],
  'Tomato': ['Red', 'Green', 'Yellow', 'Brown'],
};
String? selectedValue;

Iterable<MapEntry<String, List<String>>> _filteredFruits(
    String searchQuery) sync* {
  for (final entry in fruits.entries) {
    final filteredValues = entry.value
        .where((value) => _filterName(value, searchQuery))
        .toList();
    if (filteredValues.isNotEmpty) {
      yield MapEntry(entry.key, filteredValues);
    } else if (_filterName(entry.key, searchQuery)) {
      yield entry;
    }
  }
}

bool _filterName(String name, String searchQuery) {
  return name.toLowerCase().contains(searchQuery);
}

@override
Widget build(BuildContext context) {
  return Select<String>(
    itemBuilder: (context, item) {
      return Text(item);
    },
    popup: SelectPopup.builder(
      searchPlaceholder: const Text('Search fruit'),
      builder: (context, searchQuery) {
        final filteredFruits = searchQuery == null
            ? fruits.entries
            : _filteredFruits(searchQuery);
        return SelectItemList(
          children: [
            for (final entry in filteredFruits)
              SelectGroup(
                headers: [
                  SelectLabel(
                    child: Text(entry.key),
                  ),
                ],
                children: [
                  for (final value in entry.value)
                    SelectItemButton(
                      value: value,
                      child: Text(value),
                    ),
                ],
              ),
          ],
        );
      },
    ),
    onChanged: (value) {
      setState(() {
        selectedValue = value;
      });
    },
    constraints: const BoxConstraints(
      minWidth: 200,
    ),
    value: selectedValue,
    placeholder: const Text('Select a fruit'),
  );
}

// Select (select.md) - Async Infinite
final Map<String, List<String>> fruits = {
  'Apple': ['Red Apple', 'Green Apple'],
  'Banana': ['Yellow Banana', 'Brown Banana'],
  'Lemon': ['Yellow Lemon', 'Green Lemon'],
  'Tomato': ['Red', 'Green', 'Yellow', 'Brown'],
};
String? selectedValue;

Iterable<MapEntry<String, List<String>>> _filteredFruits(
    String searchQuery) sync* {
  for (final entry in fruits.entries) {
    final filteredValues = entry.value
        .where((value) => _filterName(value, searchQuery))
        .toList();
    if (filteredValues.isNotEmpty) {
      yield MapEntry(entry.key, filteredValues);
    } else if (_filterName(entry.key, searchQuery)) {
      yield entry;
    }
  }
}

bool _filterName(String name, String searchQuery) {
  return name.toLowerCase().contains(searchQuery);
}

@override
Widget build(BuildContext context) {
  return Select<String>(
    itemBuilder: (context, item) {
      return Text(item);
    },
    popup: SelectPopup.builder(
      searchPlaceholder: const Text('Search fruit'),
      emptyBuilder: (context) {
        return const Center(
          child: Text('No fruit found'),
        );
      },
      loadingBuilder: (context) {
        return const Center(
          child: CircularProgressIndicator(),
        );
      },
      builder: (context, searchQuery) async {
        final filteredFruits = searchQuery == null
            ? fruits.entries.toList()
            : _filteredFruits(searchQuery).toList();
        // Simulate a delay for loading
        // In a real-world scenario, you would fetch data from an API or database
        await Future.delayed(const Duration(milliseconds: 500));
        return SelectItemBuilder(
          childCount: filteredFruits.isEmpty ? 0 : null,
          builder: (context, index) {
            final entry = filteredFruits[index % filteredFruits.length];
            return SelectGroup(
              headers: [
                SelectLabel(
                  child: Text(entry.key),
                ),
              ],
              children: [
                for (final value in entry.value)
                  SelectItemButton(
                    value: value,
                    child: Text(value),
                  ),
              ],
            );
          },
        );
      },
    ),
    onChanged: (value) {
      setState(() {
        selectedValue = value;
      });
    },
    constraints: const BoxConstraints(
      minWidth: 200,
    ),
    value: selectedValue,
    placeholder: const Text('Select a fruit'),
  );
}

// Select (select.md) - No Virtualization
String? selectedValue;
@override
Widget build(BuildContext context) {
  return Select<String>(
    itemBuilder: (context, item) {
      return Text(item);
    },
    popupConstraints: const BoxConstraints(
      maxHeight: 300,
      maxWidth: 200,
    ),
    onChanged: (value) {
      setState(() {
        selectedValue = value;
      });
    },
    value: selectedValue,
    placeholder: const Text('Select a fruit'),
    popupWidthConstraint: PopoverConstraint.intrinsic,
    popup: const SelectPopup.noVirtualization(
      items: SelectItemList(
        children: [
          SelectItemButton(
            value: 'Apple',
            child: Text('Apple'),
          ),
          SelectItemButton(
            value: 'Banana',
            child: Text('Banana'),
          ),
          SelectItemButton(
            value: 'Cherry',
            child: Text('Cherry'),
          ),
        ],
      ),
    ),
  );
}

// Slider (slider.md) - Basic
SliderValue value = const SliderValue.single(0.5);
@override
Widget build(BuildContext context) {
  return Slider(
    value: value,
    onChanged: (value) {
      setState(() {
        this.value = value;
      });
    },
  );
}

// Slider (slider.md) - With Range
SliderValue value = const SliderValue.ranged(0.5, 0.75);
@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      Slider(
        value: value,
        onChanged: (value) {
          setState(() {
            this.value = value;
          });
        },
      ),
      const Gap(16),
      Text('Value: ${value.start} - ${value.end}'),
    ],
  );
}

// Slider (slider.md) - With Divisions
SliderValue value = const SliderValue.single(0.5);
@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      Slider(
        max: 2,
        divisions: 10,
        value: value,
        onChanged: (value) {
          setState(() {
            this.value = value;
          });
        },
      ),
      const Gap(16),
      Text('Value: ${value.value}'),
    ],
  );
}

// StarRating (star-rating.md) - Basic
double value = 1.5;
@override
Widget build(BuildContext context) {
  return StarRating(
    starSize: 32,
    value: value,
    onChanged: (value) {
      setState(() {
        this.value = value;
      });
    },
  );
}

// Switch (switch.md) - Basic
bool value = false;

@override
Widget build(BuildContext context) {
  return Switch(
    value: value,
    onChanged: (value) {
      setState(() {
        this.value = value;
      });
    },
  );
}

// TextArea (text-area.md) - Basic
const TextArea(
  initialValue: 'Hello, World!',
  expandableHeight: true,
  initialHeight: 300,
)

// TextArea (text-area.md) - Resizable Width
const TextArea(
  initialValue: 'Hello, World!',
  expandableWidth: true,
  initialWidth: 500,
)

// TextArea (text-area.md) - Resizable Width dan Height
const TextArea(
  initialValue: 'Hello, World!',
  expandableWidth: true,
  expandableHeight: true,
  initialWidth: 500,
  initialHeight: 300,
)

// TextField (text-input.md) - Basic
const TextField(
  placeholder: Text('Enter your name'),
)

// TextField (text-input.md) - With Features
Column(
  children: [
    TextField(
      placeholder: const Text('Enter your name'),
      features: [
        const InputFeature.clear(),
        InputFeature.hint(
          popupBuilder: (context) {
            return const TooltipContainer(
              child: Text('This is for your username'));
          },
        ),
        const InputFeature.copy(),
        const InputFeature.paste(),
      ],
    ),
    const Gap(24),
    const TextField(
      placeholder: Text('Enter your password'),
      features: [
        InputFeature.clear(
          visibility: InputFeatureVisibility.textNotEmpty,
        ),
        InputFeature.passwordToggle(mode: PasswordPeekMode.hold),
      ],
    ),
  ],
)

// TextField (text-input.md) - With Revalidate
Form(
  child: FormField(
    key: const InputKey(#test),
    label: const Text('Username'),
    validator: ConditionalValidator((value) async {
      // simulate a network delay for example purpose
      await Future.delayed(const Duration(seconds: 1));
      return !['sunarya-thito', 'septogeddon', 'admin'].contains(value);
    }, message: 'Username already taken'),
    child: const TextField(
      placeholder: Text('Enter your username'),
      initialValue: 'sunarya-thito',
      features: [
        InputFeature.revalidate(),
      ],
    ),
  ),
)

// TimePicker (time-picker.md)
TimeOfDay _value = TimeOfDay.now();
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      TimePicker(
        value: _value,
        mode: PromptMode.popover,
        onChanged: (value) {
          setState(() {
            _value = value ?? TimeOfDay.now();
          });
        },
      ),
      const Gap(16),
      TimePicker(
        value: _value,
        mode: PromptMode.dialog,
        dialogTitle: const Text('Select Time'),
        onChanged: (value) {
          setState(() {
            _value = value ?? TimeOfDay.now();
          });
        },
      ),
    ],
  );
}

// Toggle (toggle.md) - Basic
bool value = false;
@override
Widget build(BuildContext context) {
  return Toggle(
    value: value,
    onChanged: (v) {
      setState(() {
        value = v;
      });
    },
    child: const Text('Toggle'),
  );
}

// Toggle (toggle.md) - Group Example
int flag = 0;

@override
Widget build(BuildContext context) {
  return Row(
    mainAxisSize: MainAxisSize.min,
    children: [
      Toggle(
        value: flag == 0,
        style: const ButtonStyle.outline(density: ButtonDensity.compact),
        onChanged: (v) {
          setState(() {
            flag = v ? 0 : -1;
          });
        },
        child: const Text('B').bold().center(),
      ).sized(width: 40, height: 40),
      Toggle(
        value: flag == 1,
        style: const ButtonStyle.outline(density: ButtonDensity.compact),
        onChanged: (v) {
          setState(() {
            flag = v ? 1 : -1;
          });
        },
        child: const Text('I').italic().center(),
      ).sized(width: 40, height: 40),
      Toggle(
        value: flag == 2,
        style: const ButtonStyle.outline(density: ButtonDensity.compact),
        onChanged: (v) {
          setState(() {
            flag = v ? 2 : -1;
          });
        },
        child: const Text('U').underline().center(),
      ).sized(width: 40, height: 40),
    ],
  ).gap(4);
}
````

### üìÅ Layout

```dart
// AppBar (appbar.md)
OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: AppBar(
    header: const Text('This is Header'),
    title: const Text('This is Title'),
    subtitle: const Text('This is Subtitle'),
    leading: [
      OutlineButton(
        density: ButtonDensity.icon,
        onPressed: () {},
        child: const Icon(Icons.arrow_back),
      ),
    ],
    trailing: [
      OutlineButton(
        density: ButtonDensity.icon,
        onPressed: () {},
        child: const Icon(Icons.search),
      ),
      OutlineButton(
        density: ButtonDensity.icon,
        onPressed: () {},
        child: const Icon(Icons.more_vert),
      ),
    ],
  ),
)

// Card (card.md)
Card(
  padding: const EdgeInsets.all(24),
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      const Text('Create project').semiBold(),
      const SizedBox(height: 4),
      const Text('Deploy your new project in one-click').muted().small(),
      const SizedBox(height: 24),
      const Text('Name').semiBold().small(),
      const SizedBox(height: 4),
      const TextField(placeholder: Text('Name of your project')),
      const SizedBox(height: 16),
      const Text('Description').semiBold().small(),
      const SizedBox(height: 4),
      const TextField(placeholder: Text('Description of your project')),
      const SizedBox(height: 24),
      Row(
        children: [
          OutlineButton(
            child: const Text('Cancel'),
            onPressed: () {},
          ),
          const Spacer(),
          PrimaryButton(
            child: const Text('Deploy'),
            onPressed: () {},
          ),
        ],
      ),
    ],
  ),
).intrinsic()

// CardImage (card-image.md)
ScrollConfiguration(
  behavior: ScrollConfiguration.of(context).copyWith(
    dragDevices: {
      PointerDeviceKind.touch,
      PointerDeviceKind.mouse,
    },
  ),
  child: SingleChildScrollView(
    scrollDirection: Axis.horizontal,
    child: IntrinsicHeight(
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        mainAxisSize: MainAxisSize.min,
        children: [
          for (int i = 0; i < 10; i++)
            CardImage(
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (context) {
                    return AlertDialog(
                      title: const Text('Card Image'),
                      content: const Text('You clicked on a card image.'),
                      actions: [
                        PrimaryButton(
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                          child: const Text('Close'),
                        ),
                      ],
                    );
                  },
                );
              },
              image: Image.network('https://picsum.photos/200/300'),
              title: Text('Card Number ${i + 1}'),
              subtitle: const Text('Lorem ipsum dolor sit amet'),
            ),
        ],
      ).gap(8),
    ),
  ),
)

// Carousel (carousel.md) - Horizontal
final CarouselController controller = CarouselController();
SizedBox(
  width: 800,
  child: Row(
    children: [
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animatePrevious(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_back),
      ),
      const Gap(24),
      Expanded(
        child: SizedBox(
          height: 200,
          child: Carousel(
            transition: const CarouselTransition.sliding(gap: 24),
            controller: controller,
            sizeConstraint: const CarouselFixedConstraint(200),
            autoplaySpeed: const Duration(seconds: 2),
            itemCount: 5,
            itemBuilder: (context, index) {
              return NumberedContainer(index: index);
            },
            duration: const Duration(seconds: 1),
          ),
        ),
      ),
      const Gap(24),
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animateNext(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_forward),
      ),
    ],
  ),
)

// Carousel (carousel.md) - Vertical
final CarouselController controller = CarouselController();
SizedBox(
  height: 500,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animatePrevious(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_upward),
      ),
      const Gap(24),
      Expanded(
        child: SizedBox(
          width: 200,
          child: Carousel(
            transition: const CarouselTransition.sliding(gap: 24),
            alignment: CarouselAlignment.center,
            controller: controller,
            direction: Axis.vertical,
            sizeConstraint: const CarouselFixedConstraint(200),
            itemBuilder: (context, index) {
              return NumberedContainer(index: index);
            },
          ),
        ),
      ),
      const Gap(24),
      OutlineButton(
        shape: ButtonShape.circle,
        onPressed: () {
          controller.animateNext(const Duration(milliseconds: 500));
        },
        child: const Icon(Icons.arrow_downward),
      ),
    ],
  ),
)

// Carousel (carousel.md) - Fading
final CarouselController controller = CarouselController();
SizedBox(
  width: 800,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      SizedBox(
        height: 200,
        child: Carousel(
          transition: const CarouselTransition.fading(),
          controller: controller,
          draggable: false,
          autoplaySpeed: const Duration(seconds: 1),
          itemCount: 5,
          itemBuilder: (context, index) {
            return NumberedContainer(index: index);
          },
          duration: const Duration(seconds: 1),
        ),
      ),
      const Gap(8),
      Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          CarouselDotIndicator(itemCount: 5, controller: controller),
          const Spacer(),
          OutlineButton(
            shape: ButtonShape.circle,
            onPressed: () {
              controller.animatePrevious(const Duration(milliseconds: 500));
            },
            child: const Icon(Icons.arrow_back),
          ),
          const Gap(8),
          OutlineButton(
            shape: ButtonShape.circle,
            onPressed: () {
              controller.animateNext(const Duration(milliseconds: 500));
            },
            child: const Icon(Icons.arrow_forward),
          ),
        ],
      ),
    ],
  ),
)

// Carousel (carousel.md) - Continuous Sliding
final CarouselController controller = CarouselController();
SizedBox(
  width: 800,
  height: 200,
  child: Carousel(
    transition: const CarouselTransition.sliding(gap: 24),
    controller: controller,
    draggable: false,
    autoplaySpeed: const Duration(seconds: 2),
    curve: Curves.linear,
    itemCount: 5,
    sizeConstraint: const CarouselSizeConstraint.fixed(200),
    itemBuilder: (context, index) {
      return NumberedContainer(index: index);
    },
    duration: Duration.zero,
  ),
)

// Divider (divider.md) - Horizontal
const SizedBox(
  width: 300,
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      Text('Item 1'),
      Divider(),
      Text('Item 2'),
      Divider(),
      Text('Item 3'),
    ],
  ),
)
// Divider (divider.md) - Vertical
const SizedBox(
  width: 300,
  height: 100,
  child: Row(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      Expanded(child: Text('Item 1')),
      VerticalDivider(),
      Expanded(child: Text('Item 2')),
      VerticalDivider(),
      Expanded(child: Text('Item 3')),
    ],
  ),
)
// Divider with Text
const SizedBox(
  width: 300,
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      Text('Item 1'),
      Divider(child: Text('Divider')),
      Text('Item 2'),
      Divider(child: Text('Divider')),
      Text('Item 3'),
    ],
  ),
)

// Resizable (resizable.md) - Horizontal
const OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 1,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 120,
        child: NumberedContainer(
          index: 2,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 3,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 4,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Vertical
const OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.vertical(
    children: [
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 0,
          width: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 120,
        child: NumberedContainer(
          index: 1,
          width: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 2,
          width: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Horizontal with Dragger
OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    draggerBuilder: (context) {
      return const HorizontalResizableDragger();
    },
    children: const [
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 1,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 120,
        child: NumberedContainer(
          index: 2,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 3,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        initialSize: 80,
        child: NumberedContainer(
          index: 4,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Controller
final AbsoluteResizablePaneController controller1 = AbsoluteResizablePaneController(80);
final AbsoluteResizablePaneController controller2 = AbsoluteResizablePaneController(80);
final AbsoluteResizablePaneController controller3 = AbsoluteResizablePaneController(120);
final AbsoluteResizablePaneController controller4 = AbsoluteResizablePaneController(80);
final AbsoluteResizablePaneController controller5 = AbsoluteResizablePaneController(80);

OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane.controlled(
        controller: controller1,
        child: const NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller2,
        child: const NumberedContainer(
          index: 1,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller3,
        maxSize: 200,
        child: const NumberedContainer(
          index: 2,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller4,
        child: const NumberedContainer(
          index: 3,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane.controlled(
        controller: controller5,
        minSize: 80,
        collapsedSize: 20,
        child: const NumberedContainer(
          index: 4,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Collapsible
final ResizablePaneController controller = AbsoluteResizablePaneController(120);
final ResizablePaneController controller2 = AbsoluteResizablePaneController(120);

OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane.controlled(
        minSize: 100,
        collapsedSize: 40,
        controller: controller,
        child: AnimatedBuilder(
          animation: controller,
          builder: (context, child) {
            if (controller.collapsed) {
              return Container(
                alignment: Alignment.center,
                height: 200,
                child: const RotatedBox(
                  quarterTurns: -1,
                  child: Text('Collapsed'),
                ),
              );
            }
            return Container(
              alignment: Alignment.center,
              height: 200,
              child: const Text('Expanded'),
            );
          },
        ),
      ),
      ResizablePane(
        initialSize: 300,
        child: Container(
          alignment: Alignment.center,
          height: 200,
          child: const Text('Resizable'),
        ),
      ),
      ResizablePane.controlled(
        minSize: 100,
        collapsedSize: 40,
        controller: controller2,
        child: AnimatedBuilder(
          animation: controller2,
          builder: (context, child) {
            if (controller2.collapsed) {
              return Container(
                alignment: Alignment.center,
                height: 200,
                child: const RotatedBox(
                  quarterTurns: -1,
                  child: Text('Collapsed'),
                ),
              );
            }
            return Container(
              alignment: Alignment.center,
              height: 200,
              child: const Text('Expanded'),
            );
          },
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Nested
const OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: ResizablePanel.horizontal(
    children: [
      ResizablePane(
        initialSize: 100,
        minSize: 40,
        child: NumberedContainer(
          index: 0,
          height: 200,
          fill: false,
        ),
      ),
      ResizablePane(
        minSize: 100,
        initialSize: 300,
        child: ResizablePanel.vertical(
          children: [
            ResizablePane(
              initialSize: 80,
              minSize: 40,
              child: NumberedContainer(
                index: 1,
                fill: false,
              ),
            ),
            ResizablePane(
              minSize: 40,
              initialSize: 120,
              child: ResizablePanel.horizontal(
                children: [
                  ResizablePane.flex(
                    child: NumberedContainer(
                      index: 2,
                      fill: false,
                    ),
                  ),
                  ResizablePane.flex(
                    child: NumberedContainer(
                      index: 3,
                      fill: false,
                    ),
                  ),
                  ResizablePane.flex(
                    child: NumberedContainer(
                      index: 4,
                      fill: false,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      ResizablePane(
        initialSize: 100,
        minSize: 40,
        child: NumberedContainer(
          index: 5,
          height: 200,
          fill: false,
        ),
      ),
    ],
  ),
)

// Resizable (resizable.md) - Dynamic Children
final List<Color> _items = List.generate(2, (index) => _generateColor());

static Color _generateColor() {
  Random random = Random();
  return HSVColor.fromAHSV(
    1.0,
    random.nextInt(360).toDouble(),
    0.8,
    0.8,
  ).toColor();
}

OutlinedContainer(
  clipBehavior: Clip.antiAlias,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    spacing: 12,
    children: [
      ResizablePanel.vertical(
        children: [
          for (int i = 0; i < _items.length; i++)
            ResizablePane(
              key: ValueKey(_items[i].toARGB32()),
              initialSize: 200,
              minSize: 100,
              child: Container(
                color: _items[i],
                child: Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextButton(
                        child: Text('Insert Before'),
                        onPressed: () {
                          setState(() {
                            _items.insert(i, _generateColor());
                          });
                        },
                      ),
                      TextButton(
                        child: Text('Remove'),
                        onPressed: () {
                          setState(() {
                            _items.removeAt(i);
                          });
                        },
                      ),
                      TextButton(
                        child: Text('Insert After'),
                        onPressed: () {
                          setState(() {
                            _items.insert(i + 1, _generateColor());
                          });
                        },
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
      PrimaryButton(
        child: Text('Add'),
        onPressed: () {
          setState(() {
            _items.add(_generateColor());
          });
        },
      ),
    ],
  ),
)

// Scaffold (scaffold.md)
Scaffold(
  loadingProgressIndeterminate: true,
  headers: [
    AppBar(
      title: const Text('Counter App'),
      subtitle: const Text('A simple counter app'),
      leading: [
        OutlineButton(
          onPressed: () {},
          density: ButtonDensity.icon,
          child: const Icon(Icons.menu),
        ),
      ],
      trailing: [
        OutlineButton(
          onPressed: () {},
          density: ButtonDensity.icon,
          child: const Icon(Icons.search),
        ),
        OutlineButton(
          onPressed: () {},
          density: ButtonDensity.icon,
          child: const Icon(Icons.add),
        ),
      ],
    ),
    const Divider(),
  ],
  child: Center(
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        const Text('You have pushed the button this many times:').p(),
        Text('$_counter').h1(),
        PrimaryButton(
          onPressed: _incrementCounter,
          density: ButtonDensity.icon,
          child: const Icon(Icons.add),
        ).p(),
      ],
    ),
  ),
)

// Sortable (sortable.md)
// Sortable (sortable.md) - Basic
List<SortableData<String>> invited = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];
List<SortableData<String>> reserved = [
  const SortableData('David'),
  const SortableData('Richard'),
  const SortableData('Joseph'),
  const SortableData('Thomas'),
  const SortableData('Charles'),
];

SizedBox(
  height: 500,
  child: SortableLayer(
    child: Row(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Expanded(
          child: Card(
            child: SortableDropFallback<String>(
              onAccept: (value) {
                setState(() {
                  swapItemInLists([invited, reserved], value, invited, invited.length);
                });
              },
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  for (int i = 0; i < invited.length; i++)
                    Sortable<String>(
                      data: invited[i],
                      onAcceptTop: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, invited, i);
                        });
                      },
                      onAcceptBottom: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, invited, i + 1);
                        });
                      },
                      child: OutlinedContainer(
                        padding: const EdgeInsets.all(12),
                        child: Center(child: Text(invited[i].data)),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
        gap(12),
        Expanded(
          child: Card(
            child: SortableDropFallback<String>(
              onAccept: (value) {
                setState(() {
                  swapItemInLists([invited, reserved], value, reserved, reserved.length);
                });
              },
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  for (int i = 0; i < reserved.length; i++)
                    Sortable<String>(
                      data: reserved[i],
                      onAcceptTop: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, reserved, i);
                        });
                      },
                      onAcceptBottom: (value) {
                        setState(() {
                          swapItemInLists([invited, reserved], value, reserved, i + 1);
                        });
                      },
                      child: OutlinedContainer(
                        padding: const EdgeInsets.all(12),
                        child: Center(child: Text(reserved[i].data)),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ],
    ),
  ),
)

// Sortable (sortable.md) - Locked Axis
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];

SortableLayer(
  lock: true,
  child: SortableDropFallback<int>(
    onAccept: (value) {
      setState(() {
        names.add(names.removeAt(value.data));
      });
    },
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        for (int i = 0; i < names.length; i++)
          Sortable<String>(
            key: ValueKey(i),
            data: names[i],
            onAcceptTop: (value) {
              setState(() {
                names.swapItem(value, i);
              });
            },
            onAcceptBottom: (value) {
              setState(() {
                names.swapItem(value, i + 1);
              });
            },
            child: OutlinedContainer(
              padding: const EdgeInsets.all(12),
              child: Center(child: Text(names[i].data)),
            ),
          ),
      ],
    ),
  ),
)

// Sortable (sortable.md) - Horizontal
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];

SortableLayer(
  lock: true,
  child: SortableDropFallback<int>(
    onAccept: (value) {
      setState(() {
        names.add(names.removeAt(value.data));
      });
    },
    child: SizedBox(
      height: 50,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        mainAxisSize: MainAxisSize.min,
        children: [
          for (int i = 0; i < names.length; i++)
            Sortable<String>(
              key: ValueKey(i),
              data: names[i],
              onAcceptLeft: (value) {
                setState(() {
                  names.swapItem(value, i);
                });
              },
              onAcceptRight: (value) {
                setState(() {
                  names.swapItem(value, i + 1);
                });
              },
              child: OutlinedContainer(
                width: 100,
                padding: const EdgeInsets.all(12),
                child: Center(child: Text(names[i].data)),
              ),
            ),
        ],
      ),
    ),
  ),
)

// Sortable (sortable.md) - ListView
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
  const SortableData('David'),
  const SortableData('Richard'),
  const SortableData('Joseph'),
  const SortableData('Thomas'),
  const SortableData('Charles'),
  const SortableData('Daniel'),
  const SortableData('Matthew'),
  const SortableData('Anthony'),
  const SortableData('Donald'),
  const SortableData('Mark'),
  const SortableData('Paul'),
  const SortableData('Steven'),
  const SortableData('Andrew'),
  const SortableData('Kenneth'),
];

final ScrollController controller = ScrollController();

SizedBox(
  height: 400,
  child: SortableLayer(
    lock: true,
    child: SortableDropFallback<int>(
      onAccept: (value) {
        setState(() {
          names.add(names.removeAt(value.data));
        });
      },
      child: ScrollableSortableLayer(
        controller: controller,
        child: ListView.builder(
          controller: controller,
          itemBuilder: (context, i) {
            return Sortable<String>(
              key: ValueKey(i),
              data: names[i],
              onAcceptTop: (value) {
                setState(() {
                  names.swapItem(value, i);
                });
              },
              onAcceptBottom: (value) {
                setState(() {
                  names.swapItem(value, i + 1);
                });
              },
              child: OutlinedContainer(
                padding: const EdgeInsets.all(12),
                child: Center(child: Text(names[i].data)),
              ),
            );
          },
          itemCount: names.length,
        ),
      ),
    ),
  ),
)

// Sortable (sortable.md) - Drag Handle
List<SortableData<String>> names = [
  const SortableData('James'),
  const SortableData('John'),
  const SortableData('Robert'),
  const SortableData('Michael'),
  const SortableData('William'),
];

SortableLayer(
  lock: true,
  child: SortableDropFallback<int>(
    onAccept: (value) {
      setState(() {
        names.add(names.removeAt(value.data));
      });
    },
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        for (int i = 0; i < names.length; i++)
          Sortable<String>(
            key: ValueKey(i),
            data: names[i],
            // we only want user to drag the item from the handle,
            // so we disable the drag on the item itself
            enabled: false,
            onAcceptTop: (value) {
              setState(() {
                names.swapItem(value, i);
              });
            },
            onAcceptBottom: (value) {
              setState(() {
                names.swapItem(value, i + 1);
              });
            },
            child: OutlinedContainer(
              padding: const EdgeInsets.all(12),
              child: Row(
                children: [
                  const SortableDragHandle(child: Icon(Icons.drag_handle)),
                  const SizedBox(width: 8),
                  Expanded(child: Text(names[i].data)),
                ],
              ),
            ),
          ),
      ],
    ),
  ),
)

// Sortable (sortable.md) - Remove Item
late List<SortableData<String>> names;

void _reset() {
  names = [
    const SortableData('James'),
    const SortableData('John'),
    const SortableData('Robert'),
    const SortableData('Michael'),
    const SortableData('William'),
  ];
}

SortableLayer(
  child: Builder(
    // this builder is needed to access the context of the SortableLayer
    builder: (context) {
      return SortableDropFallback<int>(
        onAccept: (value) {
          setState(() {
            names.add(names.removeAt(value.data));
          });
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            PrimaryButton(
              onPressed: () {
                setState(() {
                  _reset();
                });
              },
              child: const Text('Reset'),
            ),
            for (int i = 0; i < names.length; i++)
              Sortable<String>(
                key: ValueKey(i),
                data: names[i],
                // we only want user to drag the item from the handle,
                // so we disable the drag on the item itself
                enabled: false,
                onAcceptTop: (value) {
                  setState(() {
                    names.swapItem(value, i);
                  });
                },
                onAcceptBottom: (value) {
                  setState(() {
                    names.swapItem(value, i + 1);
                  });
                },
                onDropFailed: () {
                  // Remove the item from the list if the drop failed
                  setState(() {
                    var removed = names.removeAt(i);
                    SortableLayer.ensureAndDismissDrop(context, removed);
                    // Dismissing drop will prevent the SortableLayer from
                    // animating the item back to its original position
                  });
                },
                child: OutlinedContainer(
                  padding: const EdgeInsets.all(12),
                  child: Row(
                    children: [
                      const SortableDragHandle(child: Icon(Icons.drag_handle)),
                      const SizedBox(width: 8),
                      Expanded(child: Text(names[i].data)),
                    ],
                  ),
                ),
              ),
          ],
        ),
      );
    },
  ),
)

// Stepper (stepper.md) - Vertical
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.vertical,
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Horizontal
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.horizontal,
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Failed Step
final StepperController controller = StepperController(
  stepStates: {
    1: StepState.failed,
  },
  currentStep: 1,
);

Stepper(
  controller: controller,
  direction: Axis.horizontal,
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return const StepContainer(
          actions: [
            SecondaryButton(child: Text('Prev')),
            PrimaryButton(child: Text('Next')),
          ],
          child: NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      contentBuilder: (context) {
        return const StepContainer(
          actions: [
            SecondaryButton(child: Text('Prev')),
            PrimaryButton(child: Text('Next')),
          ],
          child: NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return const StepContainer(
          actions: [
            SecondaryButton(child: Text('Prev')),
            PrimaryButton(child: Text('Finish')),
          ],
          child: NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Clickable Step
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.vertical,
  steps: [
    Step(
      title: const Text('Step 1'),
      icon: StepNumber(
        onPressed: () {
          controller.jumpToStep(0);
        },
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      icon: StepNumber(
        onPressed: () {
          controller.jumpToStep(1);
        },
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      icon: StepNumber(
        onPressed: () {
          controller.jumpToStep(2);
        },
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Custom Icon
final StepperController controller = StepperController();

Stepper(
  controller: controller,
  direction: Axis.horizontal,
  steps: [
    Step(
      title: const Text('Step 1'),
      icon: const StepNumber(
        icon: Icon(Icons.person),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 2'),
      icon: const StepNumber(
        icon: Icon(Icons.house_outlined),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      icon: const StepNumber(
        icon: Icon(Icons.work_outline),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Stepper (stepper.md) - Variants
static const List<StepVariant> _variants = [
  StepVariant.circle,
  StepVariant.circleAlt,
  StepVariant.line,
];
static const List<String> _variantNames = [
  'Circle',
  'Circle Alt',
  'Line',
];
static const List<StepSize> _stepSize = StepSize.values;
static const List<String> _stepSizeNames = [
  'Small',
  'Medium',
  'Large',
];
final StepperController controller = StepperController();
int _currentVariant = 0;
int _currentStepSize = 0;
Axis direction = Axis.horizontal;

Stepper(
  controller: controller,
  direction: direction,
  size: _stepSize[_currentStepSize],
  variant: _variants[_currentVariant],
  steps: [
    Step(
      title: const Text('Step 1'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            const SecondaryButton(child: Text('Prev')),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 1, height: 200),
        );
      },
    ),
    Step(
      title: const StepTitle(
        title: Text('Step 2'),
        subtitle: Text('Optional Step'),
      ),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Next'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 2, height: 200),
        );
      },
    ),
    Step(
      title: const Text('Step 3'),
      contentBuilder: (context) {
        return StepContainer(
          actions: [
            SecondaryButton(
              child: const Text('Prev'),
              onPressed: () {
                controller.previousStep();
              },
            ),
            PrimaryButton(
              child: const Text('Finish'),
              onPressed: () {
                controller.nextStep();
              },
            ),
          ],
          child: const NumberedContainer(index: 3, height: 200),
        );
      },
    ),
  ],
)

// Steps (steps.md)
const Steps(
  children: [
    StepItem(
      title: Text('Create a project'),
      content: [
        Text('Create a new project in the project manager.'),
        Text('Add the required files to the project.'),
      ],
    ),
    StepItem(
      title: Text('Add dependencies'),
      content: [
        Text('Add the required dependencies to the project.'),
      ],
    ),
    StepItem(
      title: Text('Run the project'),
      content: [
        Text('Run the project in the project manager.'),
      ],
    ),
  ],
)

// Timeline
Timeline(
  data: [
    TimelineData(
      time: const Text('2022-01-01'),
      title: const Text('First event'),
      content: const Text(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Odio euismod lacinia at quis risus sed vulputate odio ut. Quam viverra orci sagittis eu volutpat odio facilisis mauris.',
      ),
    ),
    TimelineData(
      time: const Text('2022-01-02'),
      title: const Text('Second event'),
      content: const Text(
        'Aut eius excepturi ex recusandae eius est minima molestiae. Nam dolores iusto ad fugit reprehenderit hic dolorem quisquam et quia omnis non suscipit nihil sit libero distinctio. Ad dolorem tempora sit nostrum voluptatem qui tempora unde? Sit rerum magnam nam ipsam nesciunt aut rerum necessitatibus est quia esse non magni quae.',
      ),
    ),
    TimelineData(
      time: const Text('2022-01-03'),
      title: const Text('Third event'),
      content: const Text(
        'Sit culpa quas ex nulla animi qui deleniti minus rem placeat mollitia. Et enim doloremque et quia sequi ea dolores voluptatem ea rerum vitae. Aut itaque incidunt est aperiam vero sit explicabo fuga id optio quis et molestiae nulla ex quae quam. Ab eius dolores ab tempora dolorum eos beatae soluta At ullam placeat est incidunt cumque.',
      ),
    ),
  ],
)
```

### üìÅ Feedback

```dart
// Alert
const Alert(
  title: Text('Alert title'),
  content: Text('This is alert content.'),
  leading: Icon(Icons.info_outline),
)

// AlertDialog
PrimaryButton(
  child: const Text('Click Here'),
  onPressed: () {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Alert title'),
          content: const Text('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
          actions: [
            OutlineButton(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
            PrimaryButton(
              child: const Text('OK'),
              onPressed: () {
                Navigator.pop(context);
              },
            ),
          ],
        );
      },
    );
  },
)

// CircularProgressIndicator (circular-progress.md) - Example
const CircularProgressIndicator()

// CircularProgressIndicator (circular-progress.md) - With Value Example
double _progress = 0;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      CircularProgressIndicator(
        value: _progress.clamp(0, 100) / 100,
        size: 48,
      ),
      const Gap(48),
      Row(
        children: [
          DestructiveButton(
            onPressed: () {
              setState(() {
                _progress = 0;
              });
            },
            child: const Text('Reset'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              setState(() {
                _progress -= 10;
              });
            },
            child: const Text('Decrease by 10'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              setState(() {
                _progress += 10;
              });
            },
            child: const Text('Increase by 10'),
          ),
        ],
      )
    ],
  );
}

// LinearProgressIndicator (linear-progress.md) - Indeterminate
const SizedBox(
  width: 200,
  child: LinearProgressIndicator(),
)

// LinearProgressIndicator (linear-progress.md) - Determinate
double value = 0;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      SizedBox(
        width: 200,
        child: LinearProgressIndicator(
          value: value,
        ),
      ),
      const Gap(24),
      Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          PrimaryButton(
            onPressed: () {
              setState(() {
                value = 0;
              });
            },
            child: const Text('Reset'),
          ),
          const Gap(24),
          PrimaryButton(
            onPressed: () {
              if (value + 0.1 >= 1) {
                return;
              }
              setState(() {
                value += 0.1;
              });
            },
            child: const Text('Increase'),
          ),
          const Gap(24),
          PrimaryButton(
            onPressed: () {
              if (value - 0.1 <= 0) {
                return;
              }
              setState(() {
                value -= 0.1;
              });
            },
            child: const Text('Decrease'),
          ),
        ],
      )
    ],
  );
}

// Progress (progress.md)
double _progress = 0.0;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      SizedBox(
        width: 400,
        child: Progress(
          progress: _progress.clamp(0, 100),
          min: 0,
          max: 100,
        ),
      ),
      const Gap(16),
      Row(
        children: [
          DestructiveButton(
            onPressed: () {
              setState(() {
                _progress = 0;
              });
            },
            child: const Text('Reset'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              if (_progress > 0) {
                setState(() {
                  _progress -= 10;
                });
              }
            },
            child: const Text('Decrease by 10'),
          ),
          const Gap(16),
          PrimaryButton(
            onPressed: () {
              if (_progress < 100) {
                setState(() {
                  _progress += 10;
                });
              }
            },
            child: const Text('Increase by 10'),
          ),
        ],
      )
    ],
  );
}

// Skeleton (skeleton.md)
Column(
  children: [
    const Basic(
      title: Text('Skeleton Example 1'),
      content: Text('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      leading: Avatar(
        initials: '',
      ),
      trailing: Icon(Icons.arrow_forward),
    ),
    const Gap(24),
    Basic(
      title: const Text('Skeleton Example 1'),
      content: const Text('Lorem ipsum dolor sit amet, consectetur adipiscing elit.'),
      leading: const Avatar(
        initials: '',
      ).asSkeleton(),
      // Note: Avatar and other Image related widget needs its own skeleton
      trailing: const Icon(Icons.arrow_forward),
    ).asSkeleton(),
  ],
)

// Toast (toast.md)
Widget buildToast(BuildContext context, ToastOverlay overlay) {
  return SurfaceCard(
    child: Basic(
      title: const Text('Event has been created'),
      subtitle: const Text('Sunday, July 07, 2024 at 12:00 PM'),
      trailing: PrimaryButton(
        size: ButtonSize.small,
        onPressed: () {
          overlay.close();
        },
        child: const Text('Undo'),
      ),
      trailingAlignment: Alignment.center,
    ),
  );
}

@override
Widget build(BuildContext context) {
  return Wrap(
    spacing: 8,
    runSpacing: 8,
    children: [
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.bottomLeft,
          );
        },
        child: const Text('Show Bottom Left Toast'),
      ),
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.bottomRight,
          );
        },
        child: const Text('Show Bottom Right Toast'),
      ),
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.topLeft,
          );
        },
        child: const Text('Show Top Left Toast'),
      ),
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.topRight,
          );
        },
        child: const Text('Show Top Right Toast'),
      ),
      // bottom center
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.bottomCenter,
          );
        },
        child: const Text('Show Bottom Center Toast'),
      ),
      // top center
      PrimaryButton(
        onPressed: () {
          showToast(
            context: context,
            builder: buildToast,
            location: ToastLocation.topCenter,
          );
        },
        child: const Text('Show Top Center Toast'),
      ),
    ],
  );
}
```

### üìÅ Overlay

```dart
// Dialog
PrimaryButton(
  onPressed: () {
    showDialog(
      context: context,
      builder: (context) {
        final FormController controller = FormController();
        return AlertDialog(
          title: const Text('Edit profile'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text('Make changes to your profile here. Click save when you\'re done'),
              const Gap(16),
              ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 400),
                child: Form(
                  controller: controller,
                  child: const FormTableLayout(rows: [
                    FormField<String>(
                      key: FormKey(#name),
                      label: Text('Name'),
                      child: TextField(
                        initialValue: 'Thito Yalasatria Sunarya',
                      ),
                    ),
                  ]),
                ).withPadding(vertical: 16),
              ),
            ],
          ),
          actions: [
            PrimaryButton(
              child: const Text('Save changes'),
              onPressed: () {
                Navigator.of(context).pop(controller.values);
              },
            ),
          ],
        );
      },
    );
  },
  child: const Text('Edit Profile'),
)

// Drawer
openDrawer(
  context: context,
  expands: true,
  builder: (context) {
    return Container(
      padding: const EdgeInsets.all(48),
      child: IntrinsicWidth(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text('Drawer content'),
            const Gap(16),
            PrimaryButton(
              onPressed: () {},
              child: const Text('Action'),
            ),
          ],
        ),
      ),
    );
  },
  position: OverlayPosition.left,
)

// HoverCard (hover-card.md)
HoverCard(
  hoverBuilder: (context) {
    return const SurfaceCard(
      child: Basic(
        leading: FlutterLogo(),
        title: Text('@flutter'),
        content: Text(
          'The Flutter SDK provides the tools to build beautiful apps for mobile, web, and desktop from a single codebase.',
        ),
      ),
    ).sized(width: 300);
  },
  child: LinkButton(
    onPressed: () {},
    child: const Text('@flutter'),
  ),
)

// Popover (popover.md)
PrimaryButton(
  onPressed: () {
    showPopover(
      context: context,
      alignment: Alignment.topCenter,
      offset: const Offset(0, 8),
      // Unless you have full opacity surface,
      // you should explicitly set the overlay barrier.
      overlayBarrier: OverlayBarrier(
        borderRadius: theme.borderRadiusLg,
      ),
      builder: (context) {
        return ModalContainer(
          child: SizedBox(
            width: 300,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const Text('Dimensions').large().medium(),
                const Text('Set the dimensions for the layer.').muted(),
                Form(
                  controller: FormController(),
                  child: const FormTableLayout(
                    rows: [
                      FormField<double>(
                        key: FormKey(#width),
                        label: Text('Width'),
                        child: TextField(
                          initialValue: '100%',
                        ),
                      ),
                      FormField<double>(
                        key: FormKey(#maxWidth),
                        label: Text('Max. Width'),
                        child: TextField(
                          initialValue: '300px',
                        ),
                      ),
                      FormField<double>(
                        key: FormKey(#height),
                        label: Text('Height'),
                        child: TextField(
                          initialValue: '25px',
                        ),
                      ),
                      FormField<double>(
                        key: FormKey(#maxHeight),
                        label: Text('Max. Height'),
                        child: TextField(
                          initialValue: 'none',
                        ),
                      ),
                    ],
                    spacing: 8,
                  ),
                ).withPadding(vertical: 16),
                PrimaryButton(
                  onPressed: () {
                    closeOverlay(context);
                  },
                  child: const Text('Submit'),
                ),
              ],
            ),
          ),
        );
      },
    ).future.then((_) {
      print('Popover closed');
    });
  },
  child: const Text('Open popover'),
)

// Sheet (sheet.md)
final FormController controller = FormController();

void saveProfile() {
  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: const Text('Profile updated'),
        content: Text('Content: ${controller.values}'),
        actions: [
          PrimaryButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: const Text('Close'),
          ),
        ],
      );
    },
  );
}

Widget buildSheet(BuildContext context) {
  return Container(
    padding: const EdgeInsets.all(24),
    constraints: const BoxConstraints(maxWidth: 400),
    child: Form(
      controller: controller,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Expanded(
                child: const Text('Edit profile').large().medium(),
              ),
              TextButton(
                density: ButtonDensity.icon,
                child: const Icon(Icons.close),
                onPressed: () {
                  closeSheet(context);
                },
              ),
            ],
          ),
          const Gap(8),
          const Text(
            'Make changes to your profile here. Click save when you\'re done.',
          ).muted(),
          const Gap(16),
          FormTableLayout(
            rows: [
              FormField<String>(
                key: const FormKey(#name),
                label: const Text('Name'),
                validator: const NotEmptyValidator() & const LengthValidator(min: 4),
                child: const TextField(
                  initialValue: 'Thito Yalasatria Sunarya',
                  placeholder: Text('Your fullname'),
                ),
              ),
              FormField<String>(
                key: const FormKey(#username),
                label: const Text('Username'),
                validator: const NotEmptyValidator() & const LengthValidator(min: 4),
                child: const TextField(
                  initialValue: '@sunarya-thito',
                  placeholder: Text('Your username'),
                ),
              ),
            ],
          ),
          const Gap(16),
          Align(
            alignment: AlignmentDirectional.centerEnd,
            child: FormErrorBuilder(
              builder: (context, errors, child) {
                return PrimaryButton(
                  onPressed: errors.isNotEmpty
                      ? null
                      : () {
                          context.submitForm().then(
                            (value) {
                              if (value.errors.isEmpty) {
                                closeSheet(context).then(
                                  (value) {
                                    saveProfile();
                                  },
                                );
                              }
                            },
                          );
                        },
                  child: const Text('Save changes'),
                );
              },
            ),
          ),
        ],
      ),
    ),
  );
}

@override
Widget build(BuildContext context) {
  return PrimaryButton(
    onPressed: () {
      openSheet(
        context: context,
        builder: (context) {
          return buildSheet(context);
        },
        position: OverlayPosition.right,
      );
    },
    child: const Text('Open Sheet'),
  );
}

// Swiper (swiper.md)
OverlayPosition _position = OverlayPosition.left;
bool _typeDrawer = true;

Widget _buildSelectPosition(OverlayPosition position, String label) {
  return SelectedButton(
    value: _position == position,
    onChanged: (value) {
      if (value) {
        setState(() {
          _position = position;
        });
      }
    },
    style: const ButtonStyle.outline(),
    selectedStyle: const ButtonStyle.primary(),
    child: Text(label),
  );
}

@override
Widget build(BuildContext context) {
  return Swiper(
    builder: (context) {
      return Container(
        constraints: const BoxConstraints(
          minWidth: 320,
          minHeight: 320,
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Hello!'),
            const Gap(24),
            PrimaryButton(
              onPressed: () {
                openDrawer(
                  context: context,
                  builder: (context) {
                    return ListView.separated(
                      itemCount: 1000,
                      itemBuilder: (context, index) {
                        return Card(
                          child: Text('Item $index'),
                        );
                      },
                      separatorBuilder: (context, index) {
                        return const Gap(8);
                      },
                    );
                  },
                  position: OverlayPosition.bottom,
                );
              },
              child: const Text('Close'),
            ),
          ],
        ),
      );
    },
    position: _position,
    handler: _typeDrawer ? SwiperHandler.drawer : SwiperHandler.sheet,
    child: SizedBox(
      height: 500,
      child: Card(
        child: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text('Swipe me!'),
              const Gap(24),
              ButtonGroup(
                children: [
                  _buildSelectPosition(OverlayPosition.left, 'Left'),
                  _buildSelectPosition(OverlayPosition.right, 'Right'),
                  _buildSelectPosition(OverlayPosition.top, 'Top'),
                  _buildSelectPosition(OverlayPosition.bottom, 'Bottom'),
                ],
              ),
              const Gap(24),
              ButtonGroup(
                children: [
                  Toggle(
                    value: _typeDrawer,
                    onChanged: (value) {
                      setState(() {
                        _typeDrawer = value;
                      });
                    },
                    child: const Text('Drawer'),
                  ),
                  Toggle(
                    value: !_typeDrawer,
                    onChanged: (value) {
                      setState(() {
                        _typeDrawer = !value;
                      });
                    },
                    child: const Text('Sheet'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    ),
  );
}

// Tooltip (tootltip.md)
Tooltip(
  tooltip: const TooltipContainer(
    child: Text('This is a tooltip.'),
  ),
  child: PrimaryButton(
    onPressed: () {},
    child: const Text('Hover over me'),
  ),
)

// Window (window.md)
final GlobalKey<WindowNavigatorHandle> navigatorKey = GlobalKey();

@override
Widget build(BuildContext context) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      OutlinedContainer(
        height: 600, // for example purpose
        child: WindowNavigator(
          key: navigatorKey,
          initialWindows: [
            Window(
              bounds: const Rect.fromLTWH(0, 0, 200, 200),
              title: const Text('Window 1'),
              content: const RebuildCounter(),
            ),
            Window(
              bounds: const Rect.fromLTWH(200, 0, 200, 200),
              title: const Text('Window 2'),
              content: const RebuildCounter(),
            ),
          ],
          child: const Center(
            child: Text('Desktop'),
          ),
        ),
      ),
      PrimaryButton(
        child: const Text('Add Window'),
        onPressed: () {
          navigatorKey.currentState?.pushWindow(
            Window(
              bounds: const Rect.fromLTWH(0, 0, 200, 200),
              title: Text(
                'Window ${navigatorKey.currentState!.windows.length + 1}',
              ),
              content: const RebuildCounter(),
            ),
          );
        },
      )
    ],
  );
}
```

### üìÅ Navigation

```dart
// Breadcrumb
Breadcrumb(
  separator: Breadcrumb.arrowSeparator,
  children: [
    TextButton(
      onPressed: () {},
      density: ButtonDensity.compact,
      child: const Text('Home'),
    ),
    const MoreDots(),
    TextButton(
      onPressed: () {},
      density: ButtonDensity.compact,
      child: const Text('Components'),
    ),
    const Text('Breadcrumb'),
  ],
)

// DotIndicator
DotIndicator(
  index: _index,
  length: 5,
  onChanged: (index) {
    setState(() {
      _index = index;
    });
  },
)

// ExpandableSidebar (expandable-sidebar.md)
bool expanded = false;
int selected = 0;

NavigationItem buildButton(String text, IconData icon) {
  return NavigationItem(
    label: Text(text),
    alignment: Alignment.centerLeft,
    selectedStyle: const ButtonStyle.primaryIcon(),
    child: Icon(icon),
  );
}

NavigationLabel buildLabel(String label) {
  return NavigationLabel(
    alignment: Alignment.centerLeft,
    child: Text(label).semiBold().muted(),
    // padding: EdgeInsets.zero,
  );
}

@override
Widget build(BuildContext context) {
  final theme = Theme.of(context);
  return OutlinedContainer(
    height: 600,
    width: 800,
    child: Row(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        NavigationRail(
          backgroundColor: theme.colorScheme.card,
          labelType: NavigationLabelType.expanded,
          labelPosition: NavigationLabelPosition.end,
          alignment: NavigationRailAlignment.start,
          expanded: expanded,
          index: selected,
          onSelected: (value) {
            setState(() {
              selected = value;
            });
          },
          children: [
            NavigationButton(
              alignment: Alignment.centerLeft,
              label: const Text('Menu'),
              onPressed: () {
                setState(() {
                  expanded = !expanded;
                });
              },
              child: const Icon(Icons.menu),
            ),
            const NavigationDivider(),
            buildLabel('You'),
            buildButton('Home', Icons.home_filled),
            buildButton('Trending', Icons.trending_up),
            buildButton('Subscription', Icons.subscriptions),
            const NavigationDivider(),
            buildLabel('History'),
            buildButton('History', Icons.history),
            buildButton('Watch Later', Icons.access_time_rounded),
            const NavigationDivider(),
            buildLabel('Movie'),
            buildButton('Action', Icons.movie_creation_outlined),
            buildButton('Horror', Icons.movie_creation_outlined),
            buildButton('Thriller', Icons.movie_creation_outlined),
            const NavigationDivider(),
            buildLabel('Short Films'),
            buildButton('Action', Icons.movie_creation_outlined),
            buildButton('Horror', Icons.movie_creation_outlined),
          ],
        ),
        const VerticalDivider(),
        const Flexible(child: SizedBox()),
      ],
    ),
  );
}

// MenuBar (menu-bar.md)
bool _showBookmarksBar = false;
bool _showFullURLs = true;
int _selectedProfile = 1;

@override
Widget build(BuildContext context) {
  return Menubar(
    children: [
      const MenuButton(
        subMenu: [
          MenuButton(
            leading: Icon(RadixIcons.filePlus),
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyT,
                control: true,
              ),
            ),
            child: Text('New Tab'),
          ),
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyN,
                control: true,
              ),
            ),
            child: Text('New Window'),
          ),
          MenuButton(
            enabled: false,
            child: Text('New Incognito Window'),
          ),
          MenuDivider(),
          MenuButton(
            subMenu: [
              MenuButton(
                child: Text('Email Link'),
              ),
              MenuButton(
                child: Text('Messages'),
              ),
              MenuButton(
                child: Text('Notes'),
              ),
            ],
            child: Text('Share'),
          ),
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyP,
                control: true,
              ),
            ),
            child: Text('Print'),
          ),
        ],
        child: Text('File'),
      ),
      const MenuButton(
        subMenu: [
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyZ,
                control: true,
              ),
            ),
            child: Text('Undo'),
          ),
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyZ,
                control: true,
                shift: true,
              ),
            ),
            child: Text('Redo'),
          ),
          MenuDivider(),
          MenuButton(
            subMenu: [
              MenuButton(
                child: Text('Search the Web'),
              ),
              MenuDivider(),
              MenuButton(
                child: Text('Find...'),
              ),
              MenuButton(
                child: Text('Find Next'),
              ),
              MenuButton(
                child: Text('Find Previous'),
              ),
            ],
            child: Text('Find'),
          ),
          MenuDivider(),
          MenuButton(
            child: Text('Cut'),
          ),
          MenuButton(
            child: Text('Copy'),
          ),
          MenuButton(
            child: Text('Paste'),
          ),
        ],
        child: Text('Edit'),
      ),
      MenuButton(
        subMenu: [
          MenuCheckbox(
            value: _showBookmarksBar,
            onChanged: (context, value) {
              setState(() {
                _showBookmarksBar = value;
              });
            },
            autoClose: false,
            child: const Text('Always Show Bookmarks Bar'),
          ),
          MenuCheckbox(
            value: _showFullURLs,
            onChanged: (context, value) {
              setState(() {
                _showFullURLs = value;
              });
            },
            autoClose: false,
            child: const Text('Always Show Full URLs'),
          ),
          const MenuDivider(),
          const MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyR,
                control: true,
              ),
            ),
            child: Text('Reload'),
          ),
          const MenuButton(
            enabled: false,
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyR,
                control: true,
                shift: true,
              ),
            ),
            child: Text('Force Reload'),
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Toggle Full Screen'),
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Hide Sidebar'),
          ),
        ],
        child: const Text('View'),
      ),
      MenuButton(
        subMenu: [
          MenuRadioGroup<int>(
            value: _selectedProfile,
            onChanged: (context, value) {
              setState(() {
                _selectedProfile = value;
              });
            },
            children: const [
              MenuRadio<int>(
                value: 0,
                autoClose: false,
                child: Text('Andy'),
              ),
              MenuRadio<int>(
                value: 1,
                autoClose: false,
                child: Text('Benoit'),
              ),
              MenuRadio<int>(
                value: 2,
                autoClose: false,
                child: Text('Luis'),
              ),
            ],
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Edit...'),
          ),
          const MenuDivider(),
          const MenuButton(
            child: Text('Add Profile...'),
          ),
        ],
        child: const Text('Profiles'),
      ),
    ],
  );
}

// NavigationBar (navigation-bar.md)
int selected = 0;

NavigationBarAlignment alignment = NavigationBarAlignment.spaceAround;
bool expands = true;
NavigationLabelType labelType = NavigationLabelType.none;
bool customButtonStyle = true;
bool expanded = true;

NavigationItem buildButton(String label, IconData icon) {
  return NavigationItem(
    style: customButtonStyle
        ? const ButtonStyle.muted(density: ButtonDensity.icon)
        : null,
    selectedStyle: customButtonStyle
        ? const ButtonStyle.fixed(density: ButtonDensity.icon)
        : null,
    label: Text(label),
    child: Icon(icon),
  );
}

@override
Widget build(BuildContext context) {
  return OutlinedContainer(
    width: 500,
    height: 400,
    child: Scaffold(
      footers: [
        const Divider(),
        NavigationBar(
          alignment: alignment,
          labelType: labelType,
          expanded: expanded,
          expands: expands,
          onSelected: (index) {
            setState(() {
              selected = index;
            });
          },
          index: selected,
          children: [
            buildButton('Home', BootstrapIcons.house),
            buildButton('Explore', BootstrapIcons.compass),
            buildButton('Library', BootstrapIcons.musicNoteList),
            buildButton('Profile', BootstrapIcons.person),
            buildButton('App', BootstrapIcons.appIndicator),
          ],
        ),
      ],
      child: Container(
        color: Colors.primaries[Colors.primaries.length - selected - 1],
        padding: const EdgeInsets.all(24),
        child: Card(
          child: Wrap(
            alignment: WrapAlignment.center,
            runAlignment: WrapAlignment.center,
            crossAxisAlignment: WrapCrossAlignment.center,
            runSpacing: 8,
            spacing: 8,
            children: [
              Select<NavigationBarAlignment>(
                value: alignment,
                itemBuilder: (BuildContext context, NavigationBarAlignment item) {
                  return Text(item.name);
                },
                popupWidthConstraint: PopoverConstraint.anchorFixedSize,
                onChanged: (value) {
                  if (value != null) {
                    setState(() {
                      alignment = value;
                    });
                  }
                },
                popup: SelectPopup(
                  items: SelectItemList(
                    children: [
                      for (var value in NavigationBarAlignment.values)
                        SelectItemButton(
                          value: value,
                          child: Text(value.name),
                        ),
                    ],
                  ),
                ),
              ),
              Select<NavigationLabelType>(
                value: labelType,
                itemBuilder: (BuildContext context, NavigationLabelType item) {
                  return Text(item.name);
                },
                popupWidthConstraint: PopoverConstraint.anchorFixedSize,
                onChanged: (value) {
                  if (value != null) {
                    setState(() {
                      labelType = value;
                    });
                  }
                },
                popup: SelectPopup(
                  items: SelectItemList(
                    children: [
                      for (var value in NavigationLabelType.values)
                        SelectItemButton(
                          value: value,
                          child: Text(value.name),
                        ),
                    ],
                  ),
                ),
              ),
              Checkbox(
                state: expands ? CheckboxState.checked : CheckboxState.unchecked,
                onChanged: (value) {
                  setState(() {
                    expands = value == CheckboxState.checked;
                  });
                },
                trailing: const Text('Expands'),
              ),
              Checkbox(
                state: customButtonStyle
                    ? CheckboxState.checked
                    : CheckboxState.unchecked,
                onChanged: (value) {
                  setState(() {
                    customButtonStyle = value == CheckboxState.checked;
                  });
                },
                trailing: const Text('Custom Button Style'),
              ),
              Checkbox(
                state: expanded ? CheckboxState.checked : CheckboxState.unchecked,
                onChanged: (value) {
                  setState(() {
                    expanded = value == CheckboxState.checked;
                  });
                },
                trailing: const Text('Expanded'),
              ),
            ],
          ),
        ),
      ),
    ),
  );
}

// NavigationMenu (navigation-menu.md)
NavigationMenu(
  children: [
    NavigationMenuItem(
      content: NavigationMenuContentList(
        reverse: true,
        children: [
          NavigationMenuContent(
            title: const Text('Introduction'),
            content: const Text(
              'Component library for Flutter based on Shadcn/UI design.',
            ),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Installation'),
            content: const Text(
              'How to install this package in your Flutter project.',
            ),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Typography'),
            content: const Text(
              'Styles and usage of typography in this package.',
            ),
            onPressed: () {},
          ),
          Clickable(
            mouseCursor: const WidgetStatePropertyAll(SystemMouseCursors.click),
            child: Card(
              borderRadius: theme.borderRadiusMd,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  const FlutterLogo(
                    size: 32,
                  ),
                  const Gap(16),
                  const Text('shadcn_flutter').mono().semiBold().large(),
                  const Gap(8),
                  const Text(
                    'Beautifully designed components from Shadcn/UI is now available for Flutter',
                  ).muted(),
                ],
              ),
            ).constrained(maxWidth: 192),
          ),
        ],
      ),
      child: const Text('Getting started'),
    ),
    NavigationMenuItem(
      content: NavigationMenuContentList(
        children: [
          NavigationMenuContent(
            title: const Text('Accordion'),
            content: const Text('Accordion component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Alert'),
            content: const Text('Alert component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Alert Dialog'),
            content: const Text('Alert Dialog component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Animation'),
            content: const Text('Animation component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Avatar'),
            content: const Text('Avatar component for Flutter.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Badge'),
            content: const Text('Badge component for Flutter.'),
            onPressed: () {},
          ),
        ],
      ),
      child: const Text('Components'),
    ),
    NavigationMenuItem(
      content: NavigationMenuContentList(
        crossAxisCount: 2,
        children: [
          // latest news
          NavigationMenuContent(
            title: const Text('Latest news'),
            content: const Text('Stay updated with the latest news.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Change log'),
            content: const Text('View the change log of this package.'),
            onPressed: () {},
          ),
          NavigationMenuContent(
            title: const Text('Contributors'),
            content: const Text('List of contributors to this package.'),
            onPressed: () {},
          ),
        ],
      ),
      child: const Text('Blog'),
    ),
    NavigationMenuItem(
      onPressed: () {},
      child: const Text('Documentation'),
    ),
  ],
)

// NavigationRail (navigation-rail.md)
int selected = 0;

NavigationRailAlignment alignment = NavigationRailAlignment.start;
NavigationLabelType labelType = NavigationLabelType.none;
NavigationLabelPosition labelPosition = NavigationLabelPosition.bottom;
bool customButtonStyle = false;
bool expanded = true;

NavigationItem buildButton(String label, IconData icon) {
  return NavigationItem(
    style: customButtonStyle
        ? const ButtonStyle.muted(density: ButtonDensity.icon)
        : null,
    selectedStyle: customButtonStyle
        ? const ButtonStyle.fixed(density: ButtonDensity.icon)
        : null,
    label: Text(label),
    child: Icon(icon),
  );
}

@override
Widget build(BuildContext context) {
  return Scaffold(
    child: Row(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        NavigationRail(
          alignment: alignment,
          labelType: labelType,
          index: selected,
          labelPosition: labelPosition,
          expanded: expanded,
          onSelected: (index) {
            setState(() {
              selected = index;
            });
          },
          children: [
            buildButton('Home', BootstrapIcons.house),
            buildButton('Explore', BootstrapIcons.compass),
            buildButton('Library', BootstrapIcons.musicNoteList),
            const NavigationDivider(),
            const NavigationLabel(child: Text('Settings')),
            buildButton('Profile', BootstrapIcons.person),
            buildButton('App', BootstrapIcons.appIndicator),
            const NavigationDivider(),
            const NavigationGap(12),
            const NavigationWidget(
              child: FlutterLogo(),
            ),
          ],
        ),
        const VerticalDivider(),
        Expanded(
          child: Container(
            color: Colors.primaries[Colors.primaries.length - selected - 1],
            padding: const EdgeInsets.all(24),
            child: Card(
              child: Wrap(
                alignment: WrapAlignment.center,
                runAlignment: WrapAlignment.center,
                crossAxisAlignment: WrapCrossAlignment.center,
                runSpacing: 8,
                spacing: 8,
                children: [
                  Select<NavigationRailAlignment>(
                    value: alignment,
                    itemBuilder: (BuildContext context, NavigationRailAlignment item) {
                      return Text(item.name);
                    },
                    popupWidthConstraint: PopoverConstraint.anchorFixedSize,
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          alignment = value;
                        });
                      }
                    },
                    popup: SelectPopup(
                      items: SelectItemList(
                        children: [
                          for (var value in NavigationRailAlignment.values)
                            SelectItemButton(
                              value: value,
                              child: Text(value.name),
                            ),
                        ],
                      ),
                    ),
                  ),
                  Select<NavigationLabelType>(
                    value: labelType,
                    itemBuilder: (BuildContext context, NavigationLabelType item) {
                      return Text(item.name);
                    },
                    popupConstraints: BoxConstraints.tight(const Size(200, 200)),
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          labelType = value;
                        });
                      }
                    },
                    popup: SelectPopup(
                      items: SelectItemList(
                        children: [
                          for (var value in NavigationLabelType.values)
                            SelectItemButton(
                              value: value,
                              child: Text(value.name),
                            ),
                        ],
                      ),
                    ),
                  ),
                  Select<NavigationLabelPosition>(
                    value: labelPosition,
                    itemBuilder: (BuildContext context, NavigationLabelPosition item) {
                      return Text(item.name);
                    },
                    onChanged: (value) {
                      if (value != null) {
                        setState(() {
                          labelPosition = value;
                        });
                      }
                    },
                    popup: SelectPopup(
                      items: SelectItemList(
                        children: [
                          for (var value in NavigationLabelPosition.values)
                            SelectItemButton(
                              value: value,
                              child: Text(value.name),
                            ),
                        ],
                      ),
                    ),
                  ),
                  Checkbox(
                    state: customButtonStyle
                        ? CheckboxState.checked
                        : CheckboxState.unchecked,
                    onChanged: (value) {
                      setState(() {
                        customButtonStyle = value == CheckboxState.checked;
                      });
                    },
                    trailing: const Text('Custom Button Style'),
                  ),
                  Checkbox(
                    state: expanded ? CheckboxState.checked : CheckboxState.unchecked,
                    onChanged: (value) {
                      setState(() {
                        expanded = value == CheckboxState.checked;
                      });
                    },
                    trailing: const Text('Expanded'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    ),
  );
}

// NavigationSidebar (navigation-sidebar.md)
int selected = 0;

NavigationBarItem buildButton(String label, IconData icon) {
  return NavigationItem(
    label: Text(label),
    child: Icon(icon),
  );
}

@override
Widget build(BuildContext context) {
  return SizedBox(
    height: 400,
    child: OutlinedContainer(
      child: NavigationSidebar(
        index: selected,
        onSelected: (index) {
          setState(() {
            selected = index;
          });
        },
        children: [
          const NavigationLabel(child: Text('Discovery')),
          buildButton('Listen Now', BootstrapIcons.playCircle),
          buildButton('Browse', BootstrapIcons.grid),
          buildButton('Radio', BootstrapIcons.broadcast),
          const NavigationGap(24),
          const NavigationDivider(),
          const NavigationLabel(child: Text('Library')),
          buildButton('Playlist', BootstrapIcons.musicNoteList),
          buildButton('Songs', BootstrapIcons.musicNote),
          buildButton('For You', BootstrapIcons.person),
          buildButton('Artists', BootstrapIcons.mic),
          buildButton('Albums', BootstrapIcons.record2),
          const NavigationGap(24),
          const NavigationDivider(),
          const NavigationLabel(child: Text('Playlists')),
          buildButton('Recently Added', BootstrapIcons.musicNoteList),
          buildButton('Recently Played', BootstrapIcons.musicNoteList),
          buildButton('Top Songs', BootstrapIcons.musicNoteList),
          buildButton('Top Albums', BootstrapIcons.musicNoteList),
          buildButton('Top Artists', BootstrapIcons.musicNoteList),
          buildButton('Logic Discography With Some Spice', BootstrapIcons.musicNoteList),
          buildButton('Bedtime Beats', BootstrapIcons.musicNoteList),
          buildButton('Feeling Happy', BootstrapIcons.musicNoteList),
          buildButton('I miss Y2K Pop', BootstrapIcons.musicNoteList),
          buildButton('Runtober', BootstrapIcons.musicNoteList),
        ],
      ),
    ),
  );
}

// Pagination (pagination.md)
int page = 1;

@override
Widget build(BuildContext context) {
  return Pagination(
    page: page,
    totalPages: 20,
    onPageChanged: (value) {
      setState(() {
        page = value;
      });
    },
    maxPages: 3,
  );
}

// TabList (tab-list.md)
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      TabList(
        index: index,
        onChanged: (value) {
          setState(() {
            index = value;
          });
        },
        children: const [
          TabItem(
            child: Text('Tab 1'),
          ),
          TabItem(
            child: Text('Tab 2'),
          ),
          TabItem(
            child: Text('Tab 3'),
          ),
        ],
      ),
      const Gap(16),
      IndexedStack(
        index: index,
        children: const [
          NumberedContainer(
            index: 1,
          ),
          NumberedContainer(
            index: 2,
          ),
          NumberedContainer(
            index: 3,
          ),
        ],
      ).sized(height: 300),
    ],
  );
}

// TabPane (tab-pane.md)
import 'package:shadcn_flutter/shadcn_flutter.dart';

class TabPaneExample1 extends StatefulWidget {
  const TabPaneExample1({super.key});

  @override
  State<TabPaneExample1> createState() => _TabPaneExample1State();
}

class MyTab {
  final String title;
  final int count;
  final String content;
  MyTab(this.title, this.count, this.content);

  @override
  String toString() {
    return 'TabData{title: $title, count: $count, content: $content}';
  }
}

class _TabPaneExample1State extends State<TabPaneExample1> {
  late List<TabPaneData<MyTab>> tabs;
  int focused = 0;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    tabs = [
      for (int i = 0; i < 3; i++)
        TabPaneData(MyTab('Tab ${i + 1}', i + 1, 'Content ${i + 1}')),
    ];
  }

  TabItem _buildTabItem(MyTab data) {
    return TabItem(
      child: ConstrainedBox(
        constraints: const BoxConstraints(minWidth: 150),
        child: Label(
          leading: OutlinedContainer(
            backgroundColor: Colors.white,
            width: 18,
            height: 18,
            borderRadius: Theme.of(context).borderRadiusMd,
            child: Center(
              child: Text(
                data.count.toString(),
                style: const TextStyle(color: Colors.black),
              ).xSmall().bold(),
            ),
          ),
          trailing: IconButton.ghost(
            shape: ButtonShape.circle,
            size: ButtonSize.xSmall,
            icon: const Icon(Icons.close),
            onPressed: () {
              setState(() {
                tabs.remove(data);
              });
            },
          ),
          child: Text(data.title),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return TabPane<MyTab>(
      // children: tabs.map((e) => _buildTabItem(e)).toList(),
      items: tabs,
      itemBuilder: (context, item, index) {
        return _buildTabItem(item.data);
      },
      focused: focused,
      onFocused: (value) {
        setState(() {
          focused = value;
        });
      },
      onSort: (value) {
        setState(() {
          tabs = value;
        });
      },
      leading: [
        IconButton.secondary(
          icon: const Icon(Icons.arrow_drop_down),
          size: ButtonSize.small,
          density: ButtonDensity.iconDense,
          onPressed: () {},
        ),
      ],
      trailing: [
        IconButton.ghost(
          icon: const Icon(Icons.add),
          size: ButtonSize.small,
          density: ButtonDensity.iconDense,
          onPressed: () {
            setState(() {
              int max = tabs.fold<int>(0, (previousValue, element) {
                return element.data.count > previousValue
                    ? element.data.count
                    : previousValue;
              });
              tabs.add(TabPaneData(
                MyTab('Tab ${max + 1}', max + 1, 'Content ${max + 1}'),
              ));
            });
          },
        )
      ],
      child: SizedBox(
        height: 400,
        child: Center(
          child: Text('Tab ${focused + 1}').xLarge().bold(),
        ),
      ),
    );
  }
}

// Tabs (tabs.md)
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      Tabs(
        index: index,
        children: const [
          TabItem(child: Text('Tab 1')),
          TabItem(child: Text('Tab 2')),
          TabItem(child: Text('Tab 3')),
        ],
        onChanged: (int value) {
          setState(() {
            index = value;
          });
        },
      ),
      const Gap(8),
      IndexedStack(
        index: index,
        children: const [
          NumberedContainer(
            index: 1,
          ),
          NumberedContainer(
            index: 2,
          ),
          NumberedContainer(
            index: 3,
          ),
        ],
      ).sized(height: 300),
    ],
  );
}

// Tree (tree.md)
bool expandIcon = false;
bool usePath = true;
bool recursiveSelection = false;

List<TreeNode<String>> treeItems = [
  TreeItem(
    data: 'Apple',
    expanded: true,
    children: [
      TreeItem(
        data: 'Red Apple',
        children: [
          TreeItem(data: 'Red Apple 1'),
          TreeItem(data: 'Red Apple 2'),
        ],
      ),
      TreeItem(data: 'Green Apple'),
    ],
  ),
  TreeItem(
    data: 'Banana',
    children: [
      TreeItem(data: 'Yellow Banana'),
      TreeItem(
        data: 'Green Banana',
        children: [
          TreeItem(data: 'Green Banana 1'),
          TreeItem(data: 'Green Banana 2'),
          TreeItem(data: 'Green Banana 3'),
        ],
      ),
    ],
  ),
  TreeItem(
    data: 'Cherry',
    children: [
      TreeItem(data: 'Red Cherry'),
      TreeItem(data: 'Green Cherry'),
    ],
  ),
  TreeItem(
    data: 'Date',
  ),
  // Tree Root acts as a parent node with no data,
  // it will flatten the children into the parent node
  TreeRoot(
    children: [
      TreeItem(
        data: 'Elderberry',
        children: [
          TreeItem(data: 'Black Elderberry'),
          TreeItem(data: 'Red Elderberry'),
        ],
      ),
      TreeItem(
        data: 'Fig',
        children: [
          TreeItem(data: 'Green Fig'),
          TreeItem(data: 'Purple Fig'),
        ],
      ),
    ],
  ),
];

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      OutlinedContainer(
        child: SizedBox(
          height: 300,
          width: 250,
          child: TreeView(
            expandIcon: expandIcon,
            shrinkWrap: true,
            recursiveSelection: recursiveSelection,
            nodes: treeItems,
            branchLine: usePath ? BranchLine.path : BranchLine.line,
            onSelectionChanged: TreeView.defaultSelectionHandler(
              treeItems,
              (value) {
                setState(() {
                  treeItems = value;
                });
              },
            ),
            builder: (context, node) {
              return TreeItemView(
                onPressed: () {},
                trailing: node.leaf
                    ? Container(
                        width: 16,
                        height: 16,
                        alignment: Alignment.center,
                        child: const CircularProgressIndicator(),
                      )
                    : null,
                leading: node.leaf
                    ? const Icon(BootstrapIcons.fileImage)
                    : Icon(
                        node.expanded
                            ? BootstrapIcons.folder2Open
                            : BootstrapIcons.folder2,
                      ),
                onExpand: TreeView.defaultItemExpandHandler(
                  treeItems,
                  node,
                  (value) {
                    setState(() {
                      treeItems = value;
                    });
                  },
                ),
                child: Text(node.data),
              );
            },
          ),
        ),
      ),
      const Gap(16),
      Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          PrimaryButton(
            onPressed: () {
              setState(() {
                treeItems = treeItems.expandAll();
              });
            },
            child: const Text('Expand All'),
          ),
          const Gap(8),
          PrimaryButton(
            onPressed: () {
              setState(() {
                treeItems = treeItems.collapseAll();
              });
            },
            child: const Text('Collapse All'),
          ),
        ],
      ),
      const Gap(8),
      Checkbox(
        state: expandIcon ? CheckboxState.checked : CheckboxState.unchecked,
        onChanged: (value) {
          setState(() {
            expandIcon = value == CheckboxState.checked;
          });
        },
        trailing: const Text('Expand Icon'),
      ),
      const Gap(8),
      Checkbox(
        state: usePath ? CheckboxState.checked : CheckboxState.unchecked,
        onChanged: (value) {
          setState(() {
            usePath = value == CheckboxState.checked;
          });
        },
        trailing: const Text('Use Path Branch Line'),
      ),
      const Gap(8),
      Checkbox(
        state: recursiveSelection
            ? CheckboxState.checked
            : CheckboxState.unchecked,
        onChanged: (value) {
          setState(() {
            recursiveSelection = value == CheckboxState.checked;
            if (recursiveSelection) {
              treeItems = treeItems.updateRecursiveSelection();
            }
          });
        },
        trailing: const Text('Recursive Selection'),
      ),
    ],
  );
}
```

### üìÅ Display

```dart
// Avatar (avatar.md)
Avatar(
  backgroundColor: Colors.red,
  initials: Avatar.getInitials('sunarya-thito'),
  provider: const NetworkImage(
    'https://avatars.githubusercontent.com/u/64018564?v=4',
  ),
)

// Username Initials
Avatar(
  initials: Avatar.getInitials('sunarya-thito'),
  size: 64,
)

// With Badge
Avatar(
  initials: Avatar.getInitials('sunarya-thito'),
  size: 64,
  badge: const AvatarBadge(
    size: 20,
    color: Colors.green,
  ),
)

// AvatarGroup (avatar-group.md)
List<AvatarWidget> getAvatars() {
  return [
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.red,
    ),
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.green,
    ),
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.blue,
    ),
    Avatar(
      initials: Avatar.getInitials('sunarya-thito'),
      backgroundColor: Colors.yellow,
    ),
  ];
}

@override
Widget build(BuildContext context) {
  return Wrap(
    spacing: 16,
    runSpacing: 16,
    children: [
      AvatarGroup.toLeft(children: getAvatars()),
      AvatarGroup.toRight(children: getAvatars()),
      AvatarGroup.toTop(children: getAvatars()),
      AvatarGroup.toBottom(children: getAvatars()),
    ],
  );
}

// CodeSnippet (code-snippet.md)
const CodeSnippet(
  code: 'flutter pub get',
  mode: 'shell',
)

// Table (table.md) - Basic Table
TableCell buildHeaderCell(String text, [bool alignRight = false]) {
  return TableCell(
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.centerRight : null,
      child: Text(text).muted().semiBold(),
    ),
  );
}

TableCell buildCell(String text, [bool alignRight = false]) {
  return TableCell(
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.centerRight : null,
      child: Text(text),
    ),
  );
}

@override
Widget build(BuildContext context) {
  return Table(
    rows: [
      TableRow(
        cells: [
          buildHeaderCell('Invoice'),
          buildHeaderCell('Status'),
          buildHeaderCell('Method'),
          buildHeaderCell('Amount', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV001'),
          buildCell('Paid'),
          buildCell('Credit Card'),
          buildCell('\$250.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV002'),
          buildCell('Pending'),
          buildCell('PayPal'),
          buildCell('\$150.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV003'),
          buildCell('Unpaid'),
          buildCell('Bank Transfer'),
          buildCell('\$350.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV004'),
          buildCell('Paid'),
          buildCell('Credit Card'),
          buildCell('\$450.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV005'),
          buildCell('Paid'),
          buildCell('PayPal'),
          buildCell('\$550.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV006'),
          buildCell('Pending'),
          buildCell('Bank Transfer'),
          buildCell('\$200.00', true),
        ],
      ),
      TableRow(
        cells: [
          buildCell('INV007'),
          buildCell('Unpaid'),
          buildCell('Credit Card'),
          buildCell('\$300.00', true),
        ],
      ),
      TableFooter(
        cells: [
          TableCell(
            columnSpan: 4,
            child: Container(
              padding: const EdgeInsets.all(8),
              child: Row(
                children: [
                  const Text('Total'),
                  Expanded(
                    child: Align(
                      alignment: Alignment.centerRight,
                      child: const Text('\$2,300.00').semiBold(),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    ],
  );
}

// Table (table.md) - Resizable
TableCell buildCell(String text, [bool alignRight = false]) {
  final theme = Theme.of(context);
  return TableCell(
    theme: TableCellTheme(
      border: WidgetStatePropertyAll(
        Border.all(
          color: theme.colorScheme.border,
          strokeAlign: BorderSide.strokeAlignCenter,
        ),
      ),
    ),
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.topRight : null,
      child: Text(text),
    ),
  );
}

final ResizableTableController controller = ResizableTableController(
  defaultColumnWidth: 150,
  defaultRowHeight: 40,
  defaultHeightConstraint: const ConstrainedTableSize(min: 40),
  defaultWidthConstraint: const ConstrainedTableSize(min: 80),
);

@override
Widget build(BuildContext context) {
  return OutlinedContainer(
    child: ResizableTable(
      controller: controller,
      rows: [
        TableHeader(
          cells: [
            buildCell('Invoice'),
            buildCell('Status'),
            buildCell('Method'),
            buildCell('Amount', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV001'),
            buildCell('Paid'),
            buildCell('Credit Card'),
            buildCell('\$250.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV002'),
            buildCell('Pending'),
            buildCell('PayPal'),
            buildCell('\$150.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV003'),
            buildCell('Unpaid'),
            buildCell('Bank Transfer'),
            buildCell('\$350.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV004'),
            buildCell('Paid'),
            buildCell('Credit Card'),
            buildCell('\$450.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV005'),
            buildCell('Paid'),
            buildCell('PayPal'),
            buildCell('\$550.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV006'),
            buildCell('Pending'),
            buildCell('Bank Transfer'),
            buildCell('\$200.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV007'),
            buildCell('Unpaid'),
            buildCell('Credit Card'),
            buildCell('\$300.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV008'),
            buildCell('Paid'),
            buildCell('Credit Card'),
            buildCell('\$250.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV009'),
            buildCell('Pending'),
            buildCell('PayPal'),
            buildCell('\$150.00', true),
          ],
        ),
        TableRow(
          cells: [
            buildCell('INV010'),
            buildCell('Unpaid'),
            buildCell('Bank Transfer'),
            buildCell('\$350.00', true),
          ],
        ),
      ],
    ),
  );
}

// Table (table.md) - Scrollable
TableCell buildCell(String text, [bool alignRight = false]) {
  final theme = Theme.of(context);
  return TableCell(
    theme: TableCellTheme(
      border: WidgetStatePropertyAll(
        Border.all(
          color: theme.colorScheme.border,
          strokeAlign: BorderSide.strokeAlignCenter,
        ),
      ),
    ),
    child: Container(
      padding: const EdgeInsets.all(8),
      alignment: alignRight ? Alignment.topRight : null,
      child: Text(text),
    ),
  );
}

@override
Widget build(BuildContext context) {
  return ScrollConfiguration(
    behavior: ScrollConfiguration.of(context).copyWith(
      dragDevices: {
        PointerDeviceKind.touch,
        PointerDeviceKind.mouse,
      },
      overscroll: false,
    ),
    child: SizedBox(
      height: 400,
      child: OutlinedContainer(
        child: ScrollableClient(
          diagonalDragBehavior: DiagonalDragBehavior.free,
          builder: (context, offset, viewportSize, child) {
            return Table(
              horizontalOffset: offset.dx,
              verticalOffset: offset.dy,
              viewportSize: viewportSize,
              defaultColumnWidth: const FixedTableSize(150),
              defaultRowHeight: const FixedTableSize(40),
              frozenCells: const FrozenTableData(
                frozenRows: [
                  TableRef(0),
                  TableRef(3),
                ],
                frozenColumns: [
                  TableRef(0),
                  TableRef(2),
                ],
              ),
              rows: [
                TableHeader(
                  cells: [
                    buildCell('Invoice'),
                    buildCell('Status'),
                    buildCell('Method'),
                    buildCell('Amount', true),
                    buildCell('Verification'),
                    buildCell('Last Updated'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV001'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$250.00', true),
                    buildCell('Verified'),
                    buildCell('2 hours ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV002'),
                    buildCell('Pending'),
                    buildCell('PayPal'),
                    buildCell('\$150.00', true),
                    buildCell('Pending'),
                    buildCell('1 day ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV003'),
                    buildCell('Unpaid'),
                    buildCell('Bank Transfer'),
                    buildCell('\$350.00', true),
                    buildCell('Unverified'),
                    buildCell('1 week ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV004'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$450.00', true),
                    buildCell('Verified'),
                    buildCell('2 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV005'),
                    buildCell('Paid'),
                    buildCell('PayPal'),
                    buildCell('\$550.00', true),
                    buildCell('Verified'),
                    buildCell('3 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV006'),
                    buildCell('Pending'),
                    buildCell('Bank Transfer'),
                    buildCell('\$200.00', true),
                    buildCell('Pending'),
                    buildCell('1 month ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV007'),
                    buildCell('Unpaid'),
                    buildCell('Credit Card'),
                    buildCell('\$300.00', true),
                    buildCell('Unverified'),
                    buildCell('1 year ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV008'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$250.00', true),
                    buildCell('Verified'),
                    buildCell('2 hours ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV009'),
                    buildCell('Pending'),
                    buildCell('PayPal'),
                    buildCell('\$150.00', true),
                    buildCell('Pending'),
                    buildCell('1 day ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV010'),
                    buildCell('Unpaid'),
                    buildCell('Bank Transfer'),
                    buildCell('\$350.00', true),
                    buildCell('Unverified'),
                    buildCell('1 week ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV011'),
                    buildCell('Paid'),
                    buildCell('Credit Card'),
                    buildCell('\$450.00', true),
                    buildCell('Verified'),
                    buildCell('2 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV012'),
                    buildCell('Paid'),
                    buildCell('PayPal'),
                    buildCell('\$550.00', true),
                    buildCell('Verified'),
                    buildCell('3 weeks ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV013'),
                    buildCell('Pending'),
                    buildCell('Bank Transfer'),
                    buildCell('\$200.00', true),
                    buildCell('Pending'),
                    buildCell('1 month ago'),
                  ],
                ),
                TableRow(
                  cells: [
                    buildCell('INV014'),
                    buildCell('Unpaid'),
                    buildCell('Credit Card'),
                    buildCell('\$300.00', true),
                    buildCell('Unverified'),
                    buildCell('1 year ago'),
                  ],
                ),
              ],
            );
          },
        ),
      ),
    ),
  );
}

// Tracker (tracker.md)
Tracker(data: data)
```

### üìÅ Utility

```dart
// Badge
const PrimaryBadge(
  child: Text('Primary'),
)

const SecondaryBadge(
  child: Text('Secondary'),
)

const OutlineBadge(
  child: Text('Outline'),
)

const DestructiveBadge(
  child: Text('Destructive'),
)

// Calendar (calendar.md) - Range
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            selectionMode: CalendarSelectionMode.range,
          ),
        ],
      ),
    ),
  );
}

// Calendar (calendar.md) - Single
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            selectionMode: CalendarSelectionMode.single,
            now: DateTime.now(),
          ),
        ],
      ),
    ),
  );
}

// Calendar (calendar.md) - Multiple
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            selectionMode: CalendarSelectionMode.multi,
          ),
        ],
      ),
    ),
  );
}

// Calendar (calendar.md) - Example
CalendarValue? _value;
CalendarView _view = CalendarView.now();

@override
Widget build(BuildContext context) {
  ShadcnLocalizations localizations = ShadcnLocalizations.of(context);
  return Card(
    child: IntrinsicWidth(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            children: [
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.previous;
                  });
                },
                child: const Icon(Icons.arrow_back).iconXSmall(),
              ),
              Text('${localizations.getMonth(_view.month)} ${_view.year}')
                  .small()
                  .medium()
                  .center()
                  .expanded(),
              OutlineButton(
                density: ButtonDensity.icon,
                onPressed: () {
                  setState(() {
                    _view = _view.next;
                  });
                },
                child: const Icon(Icons.arrow_forward).iconXSmall(),
              ),
            ],
          ),
          const Gap(16),
          Calendar(
            value: _value,
            view: _view,
            onChanged: (value) {
              setState(() {
                _value = value;
              });
            },
            now: DateTime.now(),
            selectionMode: CalendarSelectionMode.none,
          ),
        ],
      ),
    ),
  );
}

// Chip (chip.md)
Wrap(
  spacing: 8,
  runSpacing: 8,
  children: [
    Chip(
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Apple'),
    ),
    Chip(
      style: const ButtonStyle.primary(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Banana'),
    ),
    Chip(
      style: const ButtonStyle.outline(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Cherry'),
    ),
    Chip(
      style: const ButtonStyle.ghost(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Durian'),
    ),
    Chip(
      style: const ButtonStyle.destructive(),
      trailing: ChipButton(
        onPressed: () {},
        child: const Icon(Icons.close),
      ),
      child: const Text('Elderberry'),
    ),
  ],
)

// Command (command.md)
Command(
  builder: (context, query) async* {
    Map<String, List<String>> items = {
      'Suggestions': ['Calendar', 'Search Emoji', 'Launch'],
      'Settings': ['Profile', 'Mail', 'Settings'],
    };
    Map<String, Widget> icons = {
      'Calendar': const Icon(Icons.calendar_today),
      'Search Emoji': const Icon(Icons.emoji_emotions_outlined),
      'Launch': const Icon(Icons.rocket_launch_outlined),
      'Profile': const Icon(Icons.person_outline),
      'Mail': const Icon(Icons.mail_outline),
      'Settings': const Icon(Icons.settings_outlined),
    };
    for (final values in items.entries) {
      List<Widget> resultItems = [];
      for (final item in values.value) {
        if (query == null ||
            item.toLowerCase().contains(query.toLowerCase())) {
          resultItems.add(CommandItem(
            title: Text(item),
            leading: icons[item],
            onTap: () {},
          ));
        }
      }
      if (resultItems.isNotEmpty) {
        await Future.delayed(const Duration(seconds: 1));
        yield [
          CommandCategory(
            title: Text(values.key),
            children: resultItems,
          ),
        ];
      }
    }
  },
).sized(width: 300, height: 300)

// ContextMenu (context-menu.md)
int people = 0;
bool showBookmarksBar = false;
bool showFullUrls = true;

@override
Widget build(BuildContext context) {
  final theme = Theme.of(context);
  return ContextMenu(
    items: [
      const MenuButton(
        trailing: MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.bracketLeft,
            control: true,
          ),
        ),
        child: Text('Back'),
      ),
      const MenuButton(
        trailing: MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.bracketRight,
            control: true,
          ),
        ),
        enabled: false,
        child: Text('Forward'),
      ),
      const MenuButton(
        trailing: MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.keyR,
            control: true,
          ),
        ),
        child: Text('Reload'),
      ),
      const MenuButton(
        subMenu: [
          MenuButton(
            trailing: MenuShortcut(
              activator: SingleActivator(
                LogicalKeyboardKey.keyS,
                control: true,
              ),
            ),
            child: Text('Save Page As...'),
          ),
          MenuButton(
            child: Text('Create Shortcut...'),
          ),
          MenuButton(
            child: Text('Name Window...'),
          ),
          MenuDivider(),
          MenuButton(
            child: Text('Developer Tools'),
          ),
        ],
        child: Text('More Tools'),
      ),
      const MenuDivider(),
      MenuCheckbox(
        value: showBookmarksBar,
        onChanged: (context, value) {
          setState(() {
            showBookmarksBar = value;
          });
        },
        autoClose: false,
        trailing: const MenuShortcut(
          activator: SingleActivator(
            LogicalKeyboardKey.keyB,
            control: true,
            shift: true,
          ),
        ),
        child: const Text('Show Bookmarks Bar'),
      ),
      MenuCheckbox(
        value: showFullUrls,
        onChanged: (context, value) {
          setState(() {
            showFullUrls = value;
          });
        },
        autoClose: false,
        child: const Text('Show Full URLs'),
      ),
      const MenuDivider(),
      const MenuLabel(child: Text('People')),
      const MenuDivider(),
      MenuRadioGroup(
        value: people,
        onChanged: (context, value) {
          setState(() {
            people = value;
          });
        },
        children: const [
          MenuRadio(
            value: 0,
            autoClose: false,
            child: Text('Pedro Duarte'),
          ),
          MenuRadio(
            value: 1,
            autoClose: false,
            child: Text('Colm Tuite'),
          ),
        ],
      ),
    ],
    child: DashedContainer(
      borderRadius: BorderRadius.circular(theme.radiusMd),
      strokeWidth: 2,
      gap: 2,
      child: const Text('Right click here').center(),
    ).constrained(
      maxWidth: 300,
      maxHeight: 200,
    ),
  );
}

// DropdownMenu (dropdown-menu.md)
OutlineButton(
  onPressed: () {
    showDropdown(
      context: context,
      builder: (context) {
        return const DropdownMenu(
          children: [
            MenuLabel(child: Text('My Account')),
            MenuDivider(),
            MenuButton(
              child: Text('Profile'),
            ),
            MenuButton(
              child: Text('Billing'),
            ),
            MenuButton(
              child: Text('Settings'),
            ),
            MenuButton(
              child: Text('Keyboard shortcuts'),
            ),
            MenuDivider(),
            MenuButton(
              child: Text('Team'),
            ),
            MenuButton(
              subMenu: [
                MenuButton(
                  child: Text('Email'),
                ),
                MenuButton(
                  child: Text('Message'),
                ),
                MenuDivider(),
                MenuButton(
                  child: Text('More...'),
                ),
              ],
              child: Text('Invite users'),
            ),
            MenuButton(
              child: Text('New Team'),
            ),
            MenuDivider(),
            MenuButton(
              child: Text('GitHub'),
            ),
            MenuButton(
              child: Text('Support'),
            ),
            MenuButton(
              enabled: false,
              child: Text('API'),
            ),
            MenuButton(
              child: Text('Log out'),
            ),
          ],
        );
      },
    ).future.then((_) {
      print('Closed');
    });
  },
  child: const Text('Open'),
)

// KeyboardDisplay (keyboard-display.md)
const Column(
  children: [
    KeyboardDisplay(
      keys: [
        LogicalKeyboardKey.control,
        LogicalKeyboardKey.alt,
        LogicalKeyboardKey.delete,
      ],
    ),
    Gap(24),
    KeyboardDisplay.fromActivator(
      activator: SingleActivator(
        LogicalKeyboardKey.keyA,
        control: true,
        shift: true,
      ),
    )
  ],
).textSmall()

// OverflowMarquee (overflow-marquee.md)
const SizedBox(
  width: 200,
  child: OverflowMarquee(
    child: Text(
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
    ),
  ),
)

// RefreshTrigger (refresh-trigger.md)
final GlobalKey<RefreshTriggerState> _refreshTriggerKey = GlobalKey<RefreshTriggerState>();

@override
Widget build(BuildContext context) {
  return RefreshTrigger(
    key: _refreshTriggerKey,
    onRefresh: () async {
      await Future.delayed(const Duration(seconds: 2));
    },
    child: SingleChildScrollView(
      child: Container(
        height: 800,
        padding: const EdgeInsets.only(top: 32),
        alignment: Alignment.topCenter,
        child: Column(
          children: [
            const Text('Pull Me'),
            const Gap(16),
            PrimaryButton(
              onPressed: () {
                _refreshTriggerKey.currentState!.refresh();
              },
              child: const Text('Refresh'),
            ),
          ],
        ),
      ),
    ),
  );
}
```

### üìÅ Animation

```dart
// AnimatedValue (animated-value.md)
List<Color> colors = [
  Colors.red,
  Colors.green,
  Colors.blue,
];
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      AnimatedValueBuilder(
        value: colors[index],
        duration: const Duration(seconds: 1),
        lerp: Color.lerp,
        builder: (context, value, child) {
          return Container(
            width: 100,
            height: 100,
            color: value,
          );
        },
      ),
      const Gap(32),
      PrimaryButton(
        onPressed: () {
          setState(() {
            index = (index + 1) % colors.length;
          });
        },
        child: const Text('Change Color'),
      ),
    ],
  );
}

// With Initial Value
List<Color> colors = [
  Colors.red,
  Colors.green,
  Colors.blue,
];
int index = 0;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      AnimatedValueBuilder(
        value: colors[index],
        duration: const Duration(seconds: 1),
        lerp: Color.lerp,
        builder: (context, value, child) {
          return Container(
            width: 100,
            height: 100,
            color: value,
          );
        },
      ),
      const Gap(32),
      PrimaryButton(
        onPressed: () {
          setState(() {
            index = (index + 1) % colors.length;
          });
        },
        child: const Text('Change Color'),
      ),
    ],
  );
}

// NumberTicker (number-ticker.md)
int _number = 0;
final TextEditingController _controller = TextEditingController();

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      NumberTicker(
        initialNumber: 0,
        number: _number,
        style: const TextStyle(fontSize: 32),
        formatter: (number) {
          return NumberFormat.compact().format(number);
        },
      ),
      const Gap(24),
      TextField(
        initialValue: _number.toString(),
        controller: _controller,
        onEditingComplete: () {
          int? number = int.tryParse(_controller.text);
          if (number != null) {
            setState(() {
              _number = number;
            });
          }
        },
      )
    ],
  );
}

// RepeatedAnimation (repeated-animation.md)
RepeatedAnimationBuilder(
  start: const Offset(-100, 0),
  end: const Offset(100, 0),
  duration: const Duration(seconds: 1),
  builder: (context, value, child) {
    return Transform.translate(
      offset: value,
      child: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
    );
  },
)

// Reverse
RepeatedAnimationBuilder(
  start: const Offset(-100, 0),
  end: const Offset(100, 0),
  duration: const Duration(seconds: 1),
  curve: Curves.easeInOutCubic,
  mode: RepeatMode.reverse,
  builder: (context, value, child) {
    return Transform.translate(
      offset: value,
      child: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
    );
  },
)

// Ping Pong
bool play = true;

@override
Widget build(BuildContext context) {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      RepeatedAnimationBuilder(
        play: play,
        start: const Offset(-100, 0),
        end: const Offset(100, 0),
        duration: const Duration(seconds: 1),
        reverseDuration: const Duration(seconds: 5),
        curve: Curves.linear,
        reverseCurve: Curves.easeInOutCubic,
        mode: RepeatMode.pingPongReverse,
        builder: (context, value, child) {
          return Transform.translate(
            offset: value,
            child: Container(
              width: 100,
              height: 100,
              color: Colors.red,
            ),
          );
        },
      ),
      const Gap(24),
      PrimaryButton(
        onPressed: () {
          setState(() {
            play = !play;
          });
        },
        child: Text(play ? 'Stop' : 'Play'),
      )
    ],
  );
}

// TimelineAnimation (timeline-animation.md)
import 'dart:math';

import 'package:shadcn_flutter/shadcn_flutter.dart';

class TimelineAnimationExample1 extends StatefulWidget {
  const TimelineAnimationExample1({super.key});

  @override
  State<TimelineAnimationExample1> createState() => _TimelineAnimationExample1State();
}

class _TimelineAnimationExample1State extends State<TimelineAnimationExample1>
    with SingleTickerProviderStateMixin {
  final TimelineAnimation<Offset> offsetTimeline = TimelineAnimation(
    keyframes: [
      const AbsoluteKeyframe(
        Duration(seconds: 1),
        Offset(-100, -100),
        Offset(100, -100),
      ),
      const RelativeKeyframe(
        Duration(seconds: 2),
        Offset(100, 100),
      ),
      const RelativeKeyframe(
        Duration(seconds: 1),
        Offset(-100, 100),
      ),
      const RelativeKeyframe(
        Duration(seconds: 2),
        Offset(-100, -100),
      ),
    ],
    lerp: Transformers.typeOffset,
  );
  final TimelineAnimation<double> rotationTimeline = TimelineAnimation(
    keyframes: [
      const AbsoluteKeyframe(
        Duration(seconds: 1),
        0,
        pi / 2,
      ),
      const StillKeyframe(
        Duration(seconds: 2),
      ),
      const RelativeKeyframe(
        Duration(seconds: 1),
        0,
      ),
      const StillKeyframe(
        Duration(seconds: 2),
      ),
    ],
    lerp: Transformers.typeDouble,
  );

  late AnimationController controller;

  @override
  void initState() {
    super.initState();
    controller = AnimationController(
      vsync: this,
      duration: timelineMaxDuration([
        offsetTimeline,
        rotationTimeline,
      ]),
    )..repeat();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: controller,
      builder: (context, child) {
        return Transform.translate(
          offset: offsetTimeline.transformWithController(controller),
          child: Transform.rotate(
            angle: rotationTimeline.transformWithController(controller),
            child: Container(
              width: 50,
              height: 50,
              color: Colors.blue,
            ),
          ),
        );
      },
    );
  }
}
```

### üìÅ Disclosure

```dart
// Accordion (accordion.md)
const Accordion(
  items: [
    AccordionItem(
      trigger: AccordionTrigger(child: Text('Lorem ipsum dolor sit amet')),
      content: Text(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '
        'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '
        'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. '
        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. '
        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
    AccordionItem(
      trigger: AccordionTrigger(
        child: Text(
          'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',
        ),
      ),
      content: Text(
        'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '
        'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. '
        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. '
        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
    AccordionItem(
      trigger: AccordionTrigger(
        child: Text(
          'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat',
        ),
      ),
      content: Text(
        'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. '
        'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. '
        'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      ),
    ),
  ],
)

// Collapsible (collapsible.md)
Collapsible(
  children: [
    const CollapsibleTrigger(
      child: Text('@sunarya-thito starred 3 repositories'),
    ),
    OutlinedContainer(
      child: const Text('@sunarya-thito/shadcn_flutter')
          .small()
          .mono()
          .withPadding(horizontal: 16, vertical: 8),
    ).withPadding(top: 8),
    CollapsibleContent(
      child: OutlinedContainer(
        child: const Text('@flutter/flutter')
            .small()
            .mono()
            .withPadding(horizontal: 16, vertical: 8),
      ).withPadding(top: 8),
    ),
    CollapsibleContent(
      child: OutlinedContainer(
        child: const Text('@dart-lang/sdk')
            .small()
            .mono()
            .withPadding(horizontal: 16, vertical: 8),
      ).withPadding(top: 8),
    ),
  ],
)
```
